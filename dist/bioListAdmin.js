/*! For license information please see bioListAdmin.js.LICENSE.txt */
(()=>{"use strict";var e={"./app/controller/bio-list-controller.js":(e,t,s)=>{s.r(t),s.d(t,{BioListController:()=>a});class a{constructor(e,t){this.model=t,this.view=e,this.init()}init(){this.model.getBioList().then((e=>{this.onBioListChanged(e)})).catch((e=>{console.error(e)})),this.view.bindDeleteBio(this.handleDeleteBioStatus),this.view.bindMakeBioActive(this.handleUpdateBioStatus)}handleDeleteBioStatus=async e=>this.model.deleteBioFromDb(e);handleUpdateBioStatus=async e=>this.model.updateActiveBio(e);onBioListChanged=e=>{this.view.setUpBios(e)}}},"./app/model/base-models/base-model.js":(e,t,s)=>{s.r(t),s.d(t,{BaseModel:()=>a});class a{constructor(e){this.baseUrl=e}async getList(){return new Promise(((e,t)=>{fetch(this.baseUrl,{credentials:"include"}).then((s=>{Promise.all([s.json(),s.status]).then((([s,a])=>{200===a?e(s):(console.log(err),t(`Failed with response ${a}`))})).catch((e=>{console.log(e),t(`Failed response: ${e}`)}))})).catch((e=>{console.log(e),t("Failed to fetch")}))}))}async getListByTag(e){return new Promise(((t,s)=>{fetch(`${this.baseUrl}/tags/${encodeURIComponent(e)}`).then((e=>{Promise.all([e.json(),e.status]).then((([e,a])=>{200===a?t(e):s(`Failed with response ${a}`)})).catch((e=>{s(`Failed response: ${e}`)}))})).catch((e=>s("Failed to fetch")))}))}async getListItemById(e,t){return new Promise(((s,a)=>{fetch(`${this.baseUrl}/${e}/${t}`,{credentials:"include"}).then((e=>{Promise.all([e.json(),e.status]).then((([e,t])=>{200===t?s(e):a(`Failed with response ${t}`)})).catch((e=>{a("Failed response")}))})).catch((()=>a("Failed to fetch id")))}))}async createItem(e){const t={doc:e},s={method:"POST",headers:new Headers({"Content-Type":"application/json"}),credentials:"include",body:JSON.stringify(t)};return new Promise(((e,t)=>{fetch(this.baseUrl,s).then((s=>{Promise.all([s.text(),s.status]).then((([s,a])=>{200===a?e("Success"):t(`Failed with response ${a}`)})).catch((e=>{console.error(`ERROR LEVEL 2: ${e}`),t("Failed response")}))})).catch((e=>{console.error(`ERROR LEVEL 1: ${e}`),t("Failed response.")}))}))}async createFileItem(e,t){const s=new FormData;s.append("file",e),s.append("doc",JSON.stringify(t));const a={method:"POST",credentials:"include",body:s};return new Promise(((e,t)=>{fetch(this.baseUrl,a).then((s=>{Promise.all([s.text(),s.status]).then((([s,a])=>{200===a?e("Success"):t(`Failed with response ${a}`)})).catch((e=>{console.error(`ERROR LEVEL 2: ${e}`),t("Failed response")}))})).catch((e=>{console.error(`ERROR LEVEL 1: ${e}`),t("Failed response.")}))}))}async updateFileItemObject(e,t){const s=new FormData;s.append("file",e),s.append("doc",JSON.stringify(t));const a={method:"PUT",body:s,credentials:"include"};return new Promise(((e,s)=>{fetch(`${this.baseUrl}/${t.id}`,a).then((t=>{Promise.all([t.text(),t.status]).then((([t,a])=>{200===a?e("Success"):s(`Failed with response ${a}`)})).catch((e=>{console.error(`ERROR LEVEL 2: ${e}`),s("Failed response")}))})).catch((e=>{console.error(`ERROR LEVEL 1: ${e}`),s("Failed response.")}))}))}async updateItem(e){const t={doc:e},s={method:"PUT",headers:new Headers({"Content-Type":"application/json"}),credentials:"include",body:JSON.stringify(t)};return new Promise(((t,a)=>{fetch(`${this.baseUrl}/${e.id}`,s).then((e=>{Promise.all([e.text(),e.status]).then((([e,s])=>{200===s?t("Success"):(console.error(`ERROR LEVEL 2: ${e}`),a(`Failed with response ${s}`))})).catch((e=>{console.error(`ERROR LEVEL 2: ${e}`),a("Failed response")}))})).catch((e=>{console.error(`ERROR LEVEL 1: ${e}`),a("Failed response.")}))}))}async updateItemStatus(e){return new Promise(((t,s)=>{fetch(`${this.baseUrl}/set-active/${e}`,{method:"PUT",credentials:"include"}).then((e=>{Promise.all([e.json(),e.status]).then((([e,a])=>{200===a?t("Success"):s(`Failed with response ${a}`)})).catch((e=>{s("Failed response")}))})).catch((e=>{s("Failed")}))}))}async deleteItem(e){return new Promise(((t,s)=>{fetch(`${this.baseUrl}/${e}`,{method:"DELETE",credentials:"include"}).then((e=>{Promise.all([e.text(),e.status]).then((([e,a])=>{200===a?t("Success"):s(`Failed with response ${a}`)})).catch((e=>{s("Failed response")}))})).catch((e=>{s("Failed to delete text")}))}))}}},"./app/model/base-models/bio-model.js":(e,t,s)=>{s.r(t),s.d(t,{BioModel:()=>o});var a=s("./app/model/base-models/base-model.js");class o{constructor(){this.baseModel=new a.BaseModel("https://api.ngacho.com/database/bios")}async fetchBios(){return this.baseModel.getList()}async fetchBioById(e){return this.baseModel.getListItemById(e)}async purgeBio(e){return this.baseModel.deleteItem(e)}async updateBioStatus(e){return this.baseModel.updateItemStatus(e)}async updateBioWithFile(e,t){return this.baseModel.updateFileItemObject(e,t)}async updateBio(e){return this.baseModel.updateItem(e)}async publishBio(e,t){return this.baseModel.createFileItem(e,t)}}},"./app/model/bio-list-model.js":(e,t,s)=>{s.r(t),s.d(t,{BioListModel:()=>o});var a=s("./app/model/base-models/bio-model.js");class o extends a.BioModel{constructor(){super()}async getBioList(){return this.fetchBios()}async deleteBioFromDb(e){return this.purgeBio(e)}async updateActiveBio(e){return this.updateBioStatus(e)}}},"./app/view/bio/admin/bio-list-view.js":(e,t,s)=>{s.r(t),s.d(t,{BioListView:()=>a});class a{constructor(){this.biolistGallery=document.querySelector(".bio-gallery")}setUpBios(e){for(const a of e){const e=a.id,o=document.createElement("div");o.className="bio-item";let i=document.createElement("figure"),c=document.createElement("img");c.src=a.publicUrl,c.className="bio-photo",i.appendChild(c);const l=document.createElement("h3");l.className="bio-title";var t=document.createTextNode(a.title);l.onclick=function(){location.href=`/admin/edit-bio/?${e}`},l.appendChild(t);const r=document.createElement("p");r.className="bio-text";var s=document.createTextNode(a.text);r.appendChild(s);const n=document.createElement("div");n.className="icons-wrapper";const d=document.createElement("i");d.className=`fa-solid fa-circle-check activate-${e}`,a.active&&(d.className+=" active");const h=document.createElement("i");h.className=`fa-solid fa-trash delete-${e}`,n.appendChild(d),n.appendChild(h),o.appendChild(i),o.appendChild(l),o.appendChild(r),o.appendChild(n),this.biolistGallery.appendChild(o)}}bindDeleteBio(e){this.biolistGallery.addEventListener("click",(t=>{if(t.target&&"I"==t.target.nodeName&&t.target.className.includes("fa-trash")){const s=t.target.className.replace("fa-solid fa-trash delete-","");e(s).then((e=>{console.log("Deletion Successful")})).catch((e=>{console.error(e)}))}}))}bindMakeBioActive(e){this.biolistGallery.addEventListener("click",(t=>{if(t.target&&"I"==t.target.nodeName&&t.target.className.includes("fa-circle-check")&&!t.target.className.includes("active")){const s=t.target.className.replace("fa-solid fa-circle-check activate-","");e(s).then((e=>{this.activateNewlySelectedTag(s)})).catch((e=>{console.error(e)}))}}))}activateNewlySelectedTag(e){var t=this.biolistGallery.getElementsByClassName("fa-circle-check");for(const s of t){const t=s.className.replace("fa-solid fa-circle-check activate-","");s.className=s.className.replace("active",""),e===t&&(s.className+=" active")}}}}},t={};function s(a){var o=t[a];if(void 0!==o)return o.exports;var i=t[a]={exports:{}};return e[a](i,i.exports,s),i.exports}s.d=(e,t)=>{for(var a in t)s.o(t,a)&&!s.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var a={};(()=>{s.r(a);var e=s("./app/controller/bio-list-controller.js"),t=s("./app/model/bio-list-model.js"),o=s("./app/view/bio/admin/bio-list-view.js");new e.BioListController(new o.BioListView,new t.BioListModel)})()})();
//# sourceMappingURL=bioListAdmin.js.map