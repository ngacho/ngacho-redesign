{"version":3,"file":"projectEditorAdmin.js","mappings":"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","sources":["webpack://ngacho-new/./app/controller/edit-project-controller.js","webpack://ngacho-new/./app/model/base-models/base-model.js","webpack://ngacho-new/./app/model/base-models/projects-model.js","webpack://ngacho-new/./app/model/edit-project-model.js","webpack://ngacho-new/./app/view/projects/admin/edit-project-view.js","webpack://ngacho-new/webpack/bootstrap","webpack://ngacho-new/webpack/runtime/define property getters","webpack://ngacho-new/webpack/runtime/hasOwnProperty shorthand","webpack://ngacho-new/webpack/runtime/make namespace object","webpack://ngacho-new/./app/edit-project-app.js"],"sourcesContent":["export class EditProjectController{\n    \n    constructor(editProjectView, editProjectModel){\n        this.model = editProjectModel;\n        this.view = editProjectView;\n        this.projectId = '';\n        this.init()\n    }    \n\n    init(){\n        let path_extension = decodeURI(location.search);\n        this.projectId = path_extension.slice(1);\n\n        if (this.projectId) {\n            this.fetchProject(this.projectId);\n            this.view.bindHandlePublishProject(this.handlePublishEditedProject);\n        }else{\n            this.view.bindHandlePublishProject(this.handlePublishNewProject);\n        }\n    }\n\n\n    handlePublishNewProject = async (file, projectObject) => this.model.uploadNewProject(file, projectObject);\n    handlePublishEditedProject = async (file, projectObject) => { \n        return file ? this.model.uploadUpdatedProjectWithFile(file, projectObject) : this.model.uploadUpdatedProjectObjectWithoutFile(projectObject);\n        \n    };\n\n\n    fetchProject(id){\n        this.model.fetchSingleProject(id).then(\n            (project) => this.view.setUpProject(project)\n        ).catch((errMessage) =>\n            console.log(errMessage)\n        );\n\n    }\n\n}\n","export class BaseModel{\n    constructor(baseUrl){\n        this.baseUrl = baseUrl;\n\n    }\n\n\n    /**\n     * \n     * @returns {Promise with array of objects}\n     */\n    async getList(){\n        return new Promise((resolve, reject) => {\n            fetch(this.baseUrl, {credentials: 'include'})\n                .then(response => {\n                    // Process the response body and status code simultaneously\n                    Promise.all([response.json(), response.status])\n                        .then(([data, status]) => {\n                            if (status === 200) {\n                                resolve(data);\n                            } else {\n                                console.log(err);\n                                reject(`Failed with response ${status}`)\n                            }\n                        }).catch((err) => {\n                            console.log(err);\n                            reject(`Failed response: ${err}`);\n                        });\n                }).catch((err) => {\n                    console.log(err);\n                    reject(\"Failed to fetch\")\n            });\n        });\n    }\n\n    /**\n     * \n     * @param {a tag in series} tag \n     * @returns promise of array of objects\n     */\n    async getListByTag(tag){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/tags/${encodeURIComponent(tag)}`)\n                .then(response => {\n                    // Process the response body and status code simultaneously\n                    Promise.all([response.json(), response.status])\n                        .then(([data, status]) => {\n                            if (status === 200) {\n                                resolve(data);\n                            } else {\n                                reject(`Failed with response ${status}`)\n                            }\n                        }).catch((err) => {\n                            reject(`Failed response: ${err}`);\n                        });\n                }).catch((err) => reject(\"Failed to fetch\"));\n        });\n    }\n\n\n    /**\n     * \n     * @param {object id} id \n     * @returns promise of single object\n     */\n    async getListItemById(id, serverSideRendering){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${id}/${serverSideRendering}`, {credentials: 'include'}).then((response) => {\n                Promise.all([response.json(), response.status])\n                    .then(([data, status]) => {\n                        if (status === 200) {\n                            resolve(data);\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        reject(\"Failed response\")\n                    });\n\n            }).catch(() => reject(\"Failed to fetch id\"))\n        });\n    }\n\n    /**\n     * \n     * @param {item we want to create} contents \n     * @returns status of item creation\n     */\n    async createItem(contents){\n        const payload = {\n            doc: contents\n        }\n\n        const requestOptions = {\n            method: 'POST',\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n            credentials: 'include',\n            body: JSON.stringify(payload)\n        };\n\n        return new Promise((resolve, reject) => {\n            fetch(this.baseUrl, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`);\n                reject(\"Failed response.\")\n            });\n        });\n    }\n\n    /**\n     * \n     * @param {file we want to upload} file \n     * @param {any data associated with the file} itemObject \n     * @returns \n     */\n    async createFileItem(file, itemObject){\n        \n        const formData = new FormData();\n        formData.append('file', file);\n        formData.append('doc', JSON.stringify(itemObject));\n\n\n        const requestOptions = {\n            method: 'POST',\n            credentials: 'include',\n            body: formData\n        }\n\n\n        return new Promise((resolve, reject) => {\n            fetch(this.baseUrl, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`);\n                reject(\"Failed response.\")\n            });\n        });\n\n        \n\n\n    }\n\n    /**\n     * \n     * @param {file object we want to update} file \n     * @param {data object for metadata of the file} contents \n     * @returns the status of the update\n     */\n    async updateFileItemObject(file, contents){\n        const formData = new FormData();\n        formData.append('file', file);\n        formData.append('doc', JSON.stringify(contents));\n\n\n        const requestOptions = {\n            method: 'PUT',\n            body: formData,\n            credentials: 'include'\n        }\n\n\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${contents['id']}`, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`);\n                reject(\"Failed response.\")\n            });\n        });\n\n    }\n\n    /**\n     * \n     * @param {data object of item to be update} contents \n     * @returns status of updated item\n     */\n    async updateItem(contents){\n        const payload = {\n            doc: contents\n        }\n\n        const requestOptions = {\n            method: 'PUT',\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n            credentials: 'include',\n            body: JSON.stringify(payload)\n        }\n\n\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${contents['id']}`, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([response, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            console.error(`ERROR LEVEL 2: ${response}`);\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`)\n                reject(\"Failed response.\")\n            });\n        });\n\n    }\n\n    /**\n     * used for activating and deactivating items\n     * @param {id of item we want to update} id \n     * @returns status of update\n     */\n    async updateItemStatus(id){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/set-active/${id}`, {\n                method: 'PUT',\n                credentials: 'include'\n            }).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.json(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        reject(\"Failed response\");\n                    });\n            }).catch((_) => {\n                reject(\"Failed\");\n            });\n        });\n\n    }\n\n    /**\n     * \n     * @param {id of item to be deleted} id \n     * @returns \n     */\n    async deleteItem(id){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${id}`, {\n                method: 'DELETE',\n                credentials: 'include'\n            }).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([data, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        reject(\"Failed response\");\n                    });\n            }).catch((_) => {\n                reject(\"Failed to delete text\")\n            });\n        });\n\n    }\n\n    \n\n    \n}","import { BaseModel } from \"./base-model.js\";\n\nexport class ProjectBaseModel {\n\n    constructor() { \n        this.baseModel = new BaseModel(\"https://api.ngacho.com/database/projects\");\n    }\n    \n\n\n    async fetchProjects() {\n        return this.baseModel.getList();\n        \n    }\n\n    async fetchProjectById(id, serverSideRendering = false) {\n        return this.baseModel.getListItemById(id, serverSideRendering);\n    }\n\n    async deleteProject(id){\n        return this.baseModel.deleteItem(id);\n\n    }\n\n\n    async updateProjectWithFile(file, bioObject){\n        return this.baseModel.updateFileItemObject(file, bioObject);\n    }\n\n    async updateProject(bioObject){\n        return this.baseModel.updateItem(bioObject);\n    }\n\n    async publishProject(file, bioObject){\n        return this.baseModel.createFileItem(file, bioObject);\n    }\n\n\n}","import { ProjectBaseModel } from \"./base-models/projects-model.js\";\n\nexport class EditProjectModel extends ProjectBaseModel {\n    constructor(){\n        super();\n    }\n\n\n    async uploadNewProject(file, projectData){\n        let uploadRef = await this.publishProject(file, projectData);\n        return uploadRef;\n    }\n\n    async fetchSingleProject(id){\n        let fetchRef = await this.fetchProjectById(id);\n        return fetchRef;\n    }\n\n    async uploadUpdatedProjectWithFile(file, projectData){\n        let updateRef = await this.updateProjectWithFile(file, projectData);\n        return updateRef;\n\n    }\n\n    async uploadUpdatedProjectObjectWithoutFile(projectData){\n        let updateRef = await this.updateProject(projectData);\n        return updateRef;\n    }\n}","export class EditProjectView {\n    constructor() {\n        this.add_projects_wrapper = document.querySelector(\".add_projects_wrapper\");\n        this.projectForm = document.querySelector(\".project-details-form\");\n\n        this.uploadImageInput = document.getElementById(\"image-upload-input\");\n        this.projectTitleInput = document.getElementById(\"project-title-input\");\n        this.projectLanguagesInput = document.getElementById(\"project-languages-input\");\n        this.moreInfoUrl = document.getElementById(\"project-more-info-url\");\n\n        this.postProjectButton = document.getElementById(\"post-project-button\");\n        // this.resetForm();\n        this.validate();\n\n        this.projectTitleInput.addEventListener(\"input\", ()=>{\n            this.validate();\n        })\n\n        this.projectLanguagesInput.addEventListener(\"input\", ()=>{\n            this.validate();\n        })\n\n        this.moreInfoUrl.addEventListener(\"input\", ()=>{\n            this.validate();\n        })\n        \n    }\n\n    validate(){\n        if(\n            this.projectTitleInput.value.length != 0 &&\n            this.projectLanguagesInput.value.length != 0 &&\n            this.moreInfoUrl.value.length != 0\n            ){\n            this.postProjectButton.disabled = false;\n        }else{\n            this.postProjectButton.disabled = true;\n        }\n    }\n\n\n    bindHandlePublishProject(handler) {\n        let imageInput = this.uploadImageInput;\n        let projectCoverFile = null;\n\n        imageInput.addEventListener(\"change\", () => {\n            if (imageInput.files && imageInput.files[0]) {\n                var reader = new FileReader();\n\n                reader.onload = function (e) {\n                    var project_cover = document.getElementById('project-cover');\n                    project_cover.setAttribute('src', e.target.result);\n\n                };\n\n                projectCoverFile = imageInput.files[0];\n                reader.readAsDataURL(projectCoverFile);\n            }\n        });\n\n        this.postProjectButton.addEventListener(\"click\", ()=>{\n                let objId = decodeURI(location.search).slice(1);\n                var projectObject = {\n                    id : objId,\n                    title : this.projectTitleInput.value,\n                    projectLanguages : this.projectLanguagesInput.value,\n                    projectExtraInfoUrl : this.moreInfoUrl.value\n                }\n\n                var status = handler(projectCoverFile, projectObject);\n                status.then((message)=>{\n                    this.resetForm();\n                }).catch((err)=>{\n                    console.log('error ' + err);\n                })\n            \n        })\n    }\n\n    setUpProject(projectData){\n        var projectUrl =  projectData.projectExtraInfoUrl;\n        var projectLanguages = projectData.projectLanguages;\n        var projectCoverUrl = projectData.publicUrl;\n        var projectID = projectData.id;\n\n        var project_cover = document.getElementById('project-cover');\n        project_cover.setAttribute('src', projectCoverUrl);\n\n        this.projectTitleInput.value = projectID.substr(0, projectID.length-5);\n        this.projectLanguagesInput.value = projectLanguages;\n        this.moreInfoUrl.value = projectUrl;\n\n        this.validate()\n    }\n    resetForm(){\n        this.projectForm.submit();\n        return false;\n    }\n\n\n\n\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { EditProjectController } from './controller/edit-project-controller.js';\nimport { EditProjectView } from './view/projects/admin/edit-project-view.js';\nimport { EditProjectModel } from './model/edit-project-model.js';\n\nconst app = new EditProjectController(new EditProjectView(), new EditProjectModel());\n\n"],"names":["EditProjectController","constructor","editProjectView","editProjectModel","this","model","view","projectId","init","path_extension","decodeURI","location","search","slice","fetchProject","bindHandlePublishProject","handlePublishEditedProject","handlePublishNewProject","async","file","projectObject","uploadNewProject","uploadUpdatedProjectWithFile","uploadUpdatedProjectObjectWithoutFile","id","fetchSingleProject","then","project","setUpProject","catch","errMessage","console","log","BaseModel","baseUrl","Promise","resolve","reject","fetch","credentials","response","all","json","status","data","err","tag","encodeURIComponent","serverSideRendering","contents","payload","doc","requestOptions","method","headers","Headers","body","JSON","stringify","text","_","error","itemObject","formData","FormData","append","ProjectBaseModel","baseModel","getList","getListItemById","deleteItem","bioObject","updateFileItemObject","updateItem","createFileItem","EditProjectModel","super","projectData","publishProject","fetchProjectById","updateProjectWithFile","updateProject","EditProjectView","add_projects_wrapper","document","querySelector","projectForm","uploadImageInput","getElementById","projectTitleInput","projectLanguagesInput","moreInfoUrl","postProjectButton","validate","addEventListener","value","length","disabled","handler","imageInput","projectCoverFile","files","reader","FileReader","onload","e","setAttribute","target","result","readAsDataURL","title","projectLanguages","projectExtraInfoUrl","message","resetForm","projectUrl","projectCoverUrl","publicUrl","projectID","substr","submit","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag"],"sourceRoot":""}