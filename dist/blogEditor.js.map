{"version":3,"file":"blogEditor.js","mappings":"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","sources":["webpack://ngacho-new/./app/controller/edit-blog-controller.js","webpack://ngacho-new/./app/model/base-models/base-model.js","webpack://ngacho-new/./app/model/base-models/blog-model.js","webpack://ngacho-new/./app/model/edit-blog-model.js","webpack://ngacho-new/./app/view/blog/admin/edit-blog-view.js","webpack://ngacho-new/webpack/bootstrap","webpack://ngacho-new/webpack/runtime/define property getters","webpack://ngacho-new/webpack/runtime/hasOwnProperty shorthand","webpack://ngacho-new/webpack/runtime/make namespace object","webpack://ngacho-new/./app/edit-blog-app.js"],"sourcesContent":["export class EditBlogController {\n\n    constructor(blogListModel, blogListView) {\n        this.model = blogListModel;\n        this.view = blogListView;\n        this.blogId = '';\n\n        this.init();\n    }\n\n    init() {\n\n        // check if link has anything.\n        let path_extension = decodeURI(location.search);\n        this.blogId = path_extension.slice(1);\n\n        if (this.blogId) {\n            this.fetchBlog(this.blogId);\n            this.view.bindHandlePublish(this.handleEditBlog);\n        }else{\n            this.view.bindHandlePublish(this.handlePublishNewBlog)\n        }\n\n    }\n\n    fetchBlog(id) {\n        this.model.fetchBlogFromDb(id).then((data)=>{\n            this.view.setUpBlog(data);\n        }).catch((errMessage) => console.log(errMessage));\n\n\n    }\n\n    handleEditBlog = async (editedBlog) => this.model.updateBlog({id : this.blogId, ...editedBlog});\n\n    handlePublishNewBlog = async (newBlog) => this.model.publishNewBlog(newBlog);\n\n    \n}","export class BaseModel{\n    constructor(baseUrl){\n        this.baseUrl = baseUrl;\n\n    }\n\n\n    /**\n     * \n     * @returns {Promise with array of objects}\n     */\n    async getList(){\n        return new Promise((resolve, reject) => {\n            fetch(this.baseUrl, {credentials: 'include'})\n                .then(response => {\n                    // Process the response body and status code simultaneously\n                    Promise.all([response.json(), response.status])\n                        .then(([data, status]) => {\n                            if (status === 200) {\n                                resolve(data);\n                            } else {\n                                console.log(err);\n                                reject(`Failed with response ${status}`)\n                            }\n                        }).catch((err) => {\n                            console.log(err);\n                            reject(`Failed response: ${err}`);\n                        });\n                }).catch((err) => {\n                    console.log(err);\n                    reject(\"Failed to fetch\")\n            });\n        });\n    }\n\n    /**\n     * \n     * @param {a tag in series} tag \n     * @returns promise of array of objects\n     */\n    async getListByTag(tag){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/tags/${encodeURIComponent(tag)}`)\n                .then(response => {\n                    // Process the response body and status code simultaneously\n                    Promise.all([response.json(), response.status])\n                        .then(([data, status]) => {\n                            if (status === 200) {\n                                resolve(data);\n                            } else {\n                                reject(`Failed with response ${status}`)\n                            }\n                        }).catch((err) => {\n                            reject(`Failed response: ${err}`);\n                        });\n                }).catch((err) => reject(\"Failed to fetch\"));\n        });\n    }\n\n\n    /**\n     * \n     * @param {object id} id \n     * @returns promise of single object\n     */\n    async getListItemById(id, serverSideRendering){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${id}/${serverSideRendering}`, {credentials: 'include'}).then((response) => {\n                Promise.all([response.json(), response.status])\n                    .then(([data, status]) => {\n                        if (status === 200) {\n                            resolve(data);\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        reject(\"Failed response\")\n                    });\n\n            }).catch(() => reject(\"Failed to fetch id\"))\n        });\n    }\n\n    /**\n     * \n     * @param {item we want to create} contents \n     * @returns status of item creation\n     */\n    async createItem(contents){\n        const payload = {\n            doc: contents\n        }\n\n        const requestOptions = {\n            method: 'POST',\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n            credentials: 'include',\n            body: JSON.stringify(payload)\n        };\n\n        return new Promise((resolve, reject) => {\n            fetch(this.baseUrl, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`);\n                reject(\"Failed response.\")\n            });\n        });\n    }\n\n    /**\n     * \n     * @param {file we want to upload} file \n     * @param {any data associated with the file} itemObject \n     * @returns \n     */\n    async createFileItem(file, itemObject){\n        \n        const formData = new FormData();\n        formData.append('file', file);\n        formData.append('doc', JSON.stringify(itemObject));\n\n\n        const requestOptions = {\n            method: 'POST',\n            credentials: 'include',\n            body: formData\n        }\n\n\n        return new Promise((resolve, reject) => {\n            fetch(this.baseUrl, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`);\n                reject(\"Failed response.\")\n            });\n        });\n\n        \n\n\n    }\n\n    /**\n     * \n     * @param {file object we want to update} file \n     * @param {data object for metadata of the file} contents \n     * @returns the status of the update\n     */\n    async updateFileItemObject(file, contents){\n        const formData = new FormData();\n        formData.append('file', file);\n        formData.append('doc', JSON.stringify(contents));\n\n\n        const requestOptions = {\n            method: 'PUT',\n            body: formData,\n            credentials: 'include'\n        }\n\n\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${contents['id']}`, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`);\n                reject(\"Failed response.\")\n            });\n        });\n\n    }\n\n    /**\n     * \n     * @param {data object of item to be update} contents \n     * @returns status of updated item\n     */\n    async updateItem(contents){\n        const payload = {\n            doc: contents\n        }\n\n        const requestOptions = {\n            method: 'PUT',\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n            credentials: 'include',\n            body: JSON.stringify(payload)\n        }\n\n\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${contents['id']}`, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([response, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            console.error(`ERROR LEVEL 2: ${response}`);\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`)\n                reject(\"Failed response.\")\n            });\n        });\n\n    }\n\n    /**\n     * used for activating and deactivating items\n     * @param {id of item we want to update} id \n     * @returns status of update\n     */\n    async updateItemStatus(id){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/set-active/${id}`, {\n                method: 'PUT',\n                credentials: 'include'\n            }).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.json(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        reject(\"Failed response\");\n                    });\n            }).catch((_) => {\n                reject(\"Failed\");\n            });\n        });\n\n    }\n\n    /**\n     * \n     * @param {id of item to be deleted} id \n     * @returns \n     */\n    async deleteItem(id){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${id}`, {\n                method: 'DELETE',\n                credentials: 'include'\n            }).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([data, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        reject(\"Failed response\");\n                    });\n            }).catch((_) => {\n                reject(\"Failed to delete text\")\n            });\n        });\n\n    }\n\n    \n\n    \n}","import { BaseModel } from \"./base-model.js\";\n\nexport class BlogModel {\n\n    /**\n     * getBlogs\n     * deleteBlogById\n     * editBlog\n     * addBlog\n     */\n    constructor() {\n        this.baseModel = new BaseModel(\"https://api.ngacho.com/database/blogs\");\n    }\n\n    // pass me a new blog. I'll modify the id\n    async addBlog(blog) {\n        return this.baseModel.createItem(blog);\n    }\n\n    // pass me an edited blog, it should have a blog id.\n    async editBlog(editedBlog) {\n        return this.baseModel.updateItem(editedBlog);\n    }\n\n    async getBlogs() {\n        return this.baseModel.getList();\n    }\n\n    // singular blog raw vs ssr\n    async getBlog(blogId, serverSideRendering = false) {\n        return this.baseModel.getListItemById(blogId, serverSideRendering);\n    }\n\n    async deleteBlogById(blogId) {\n        return this.baseModel.deleteItem(blogId);\n    }\n\n    // filter blog by tags.\n    async getBlogsByTags(tag) {\n        return this.baseModel.getListByTag(tag);\n    }\n\n}\n","import { BlogModel } from \"./base-models/blog-model.js\";\n\nexport class EditBlogModel extends BlogModel {\n\n    constructor() {\n        super();\n    }\n\n    async fetchBlogFromDb(id) {\n        let blogRef = await this.getBlog(id, true);\n        return blogRef;\n    }\n\n    async updateBlog(editedBlog) {\n        var updateStatus = await this.editBlog(editedBlog);\n\n        return updateStatus;\n    }\n\n    async publishNewBlog(blog){\n        var publishStatus = await this.addBlog(blog);\n        return publishStatus;\n    }\n\n}","// import katex from \"https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.js\";\n\nexport class EditBlogView {\n\n    constructor() {\n        this.blogTitleField = document.querySelector('.title');\n        this.articleField = document.querySelector('.article');\n        this.postDescriptField = document.querySelector('.post-descript');\n        this.tagsField = document.querySelector('.tags');\n        this.publishBtn = document.querySelector('.publish-btn');\n        this.blog_options = document.querySelector('.blog-options');\n        this.blog_div = document.querySelector('.blog');\n\n        // blog options\n        this.blogPublishedDate = '';\n        // months\n        this.months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\n        this.blogPrevContainer = document.querySelector('.blog-content');\n\n\n        this.blogTitlePreviewField = document.querySelector('.blog-heading-preview');\n        this.blogTimePreviewField = document.querySelector('.blog-time-preview');\n        this.blogPostDescriptPreviewField = document.querySelector('.post-description-preview');\n        this.blogPostPreviewField = document.querySelector('.blog-post-article-preview');\n\n\n\n        \n        // event listeners for the title.\n        this.blogTitleField.addEventListener(\"input\", () => {\n            var titleText = this.blogTitleField.value;\n            const htmlStr = this.parseMarkdown(titleText);\n\n            this.blogTitlePreviewField.innerHTML = htmlStr;\n\n        });\n\n        this.postDescriptField.addEventListener(\"input\", ()=>{\n            var postDescript = this.postDescriptField.value;\n            const htmlStr = this.parseMarkdown(postDescript);\n            this.blogPostDescriptPreviewField.innerHTML = htmlStr;\n            \n        })\n\n        // event listeners for article\n        this.articleField.addEventListener(\"input\", () => {\n            var articleText = this.articleField.value;\n            const htmlStr = this.parseMarkdown(articleText);\n            this.blogPostPreviewField.innerHTML = htmlStr;\n        });\n\n    }\n\n\n    setUpBlog(data) {\n        this.blogTitleField.value = data['title'];\n        let tags_List = data[\"tags\"].join(\", \") // bug is here.\n        this.tagsField.value = tags_List;\n        this.postDescriptField.value = data[\"descript\"];\n        this.articleField.value = data[\"text\"];\n        this.blogPublishedDate = data[\"publishedAt\"];\n        this.setUpPreviewBlogPreview(data);\n    }\n\n\n    publishBlog(handler) {\n        if (this.articleField.value.length && this.blogTitleField.value.length) {\n\n            var edit_snack_bar = document.createElement('div');\n            edit_snack_bar.id = \"snackbar\"\n            edit_snack_bar.className = 'edit-snack-bar';\n            var edit_blog_text = document.createTextNode('Edits Published');\n            edit_snack_bar.appendChild(edit_blog_text);\n            // append the edit to the div.\n            this.blog_div.appendChild(edit_snack_bar);\n\n\n            var snack_bar = document.querySelector('.edit-snack-bar');\n            let date = new Date();\n\n            var blogData = {\n                title: this.blogTitleField.value,\n                tags: this.tagsField.value.split(',').map((tag) => tag.trim()).filter(n => n),\n                descript: this.postDescriptField.value,\n                text: this.articleField.value,\n                publishedAt: this.blogPublishedDate,\n                lastModified: `${date.getDate()} ${this.months[date.getMonth()]} ${date.getFullYear()}`\n            }\n\n            var status = handler(blogData);\n\n            status.then((_) => {\n                // Add the \"show\" class to DIV\n                snack_bar.className = \"show\";\n                // After 1 seconds, remove the show class from DIV\n                setTimeout(function () { snack_bar.className = snack_bar.className.replace(\"show\", \"\"); }, 1000);\n                console.info('success');\n            }).catch((err) => {\n                console.error(err)\n            });\n        }\n    }\n\n    bindHandlePublish(handler) {\n        this.publishBtn.addEventListener('click', _ => {\n            this.publishBlog(handler)\n        });\n    }\n\n    setUpPreviewBlogPreview(data) {\n\n        var heading = document.createTextNode(data[\"title\"]);\n        this.blogTitlePreviewField.appendChild(heading);\n\n\n        var time = document.createTextNode(data[\"publishedAt\"]);\n        this.blogTimePreviewField.appendChild(time);\n\n        var descript = data[\"descript\"];\n        if (descript) {\n            var blockQuote = document.createTextNode(descript);\n            this.blogPostDescriptPreviewField.appendChild(blockQuote);\n        }\n\n\n        // console.log(data['html']);\n        // // html string\n        this.blogPostPreviewField.innerHTML = data['html'];\n\n    }\n\n    parseMarkdown(markdownText) {\n        var converter = new showdown.Converter()\n        let regex = /\\$(.*?)\\$|([^$]+)/g;\n        let replaced = markdownText.replace(regex, (match, group1, group2) => {\n            if (group1) {\n                // If group1 is defined, then the match was between $ and $\n                return katex.renderToString(group1, { throwOnError: false, trust: true });\n            } else {\n                // Otherwise, the match was outside $ and $\n                return converter.makeHtml(group2);\n            }\n        });\n        \n        return replaced;\n    }\n\n\n}\n\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { EditBlogController } from \"./controller/edit-blog-controller.js\";\nimport { EditBlogModel } from \"./model/edit-blog-model.js\";\nimport { EditBlogView } from \"./view/blog/admin/edit-blog-view.js\";\n\nconst app = new EditBlogController(new EditBlogModel(), new EditBlogView());"],"names":["EditBlogController","constructor","blogListModel","blogListView","this","model","view","blogId","init","path_extension","decodeURI","location","search","slice","fetchBlog","bindHandlePublish","handleEditBlog","handlePublishNewBlog","id","fetchBlogFromDb","then","data","setUpBlog","catch","errMessage","console","log","async","editedBlog","updateBlog","newBlog","publishNewBlog","BaseModel","baseUrl","Promise","resolve","reject","fetch","credentials","response","all","json","status","err","tag","encodeURIComponent","serverSideRendering","contents","payload","doc","requestOptions","method","headers","Headers","body","JSON","stringify","text","_","error","file","itemObject","formData","FormData","append","BlogModel","baseModel","blog","createItem","updateItem","getList","getListItemById","deleteItem","getListByTag","EditBlogModel","super","getBlog","editBlog","addBlog","EditBlogView","blogTitleField","document","querySelector","articleField","postDescriptField","tagsField","publishBtn","blog_options","blog_div","blogPublishedDate","months","blogPrevContainer","blogTitlePreviewField","blogTimePreviewField","blogPostDescriptPreviewField","blogPostPreviewField","addEventListener","titleText","value","htmlStr","parseMarkdown","innerHTML","postDescript","articleText","tags_List","join","setUpPreviewBlogPreview","publishBlog","handler","length","edit_snack_bar","createElement","className","edit_blog_text","createTextNode","appendChild","snack_bar","date","Date","title","tags","split","map","trim","filter","n","descript","publishedAt","lastModified","getDate","getMonth","getFullYear","setTimeout","replace","info","heading","time","blockQuote","markdownText","converter","showdown","Converter","match","group1","group2","katex","renderToString","throwOnError","trust","makeHtml","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag"],"sourceRoot":""}