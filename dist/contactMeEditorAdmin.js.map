{"version":3,"file":"contactMeEditorAdmin.js","mappings":";mIAEO,MAAMA,EAETC,YAAYC,EAAOC,GACfC,KAAKF,MAAQA,EACbE,KAAKD,KAAOA,EACZC,KAAKC,YAAc,GAEnBD,KAAKE,MACT,CAEAA,OACI,IAAIC,EAAiBC,UAAUC,SAASC,QACxCN,KAAKC,YAAcE,EAAeI,MAAM,GAErCP,KAAKC,aACJD,KAAKQ,eAAeR,KAAKC,aACzBD,KAAKD,KAAKU,2BAA2BT,KAAKU,gCAE1CV,KAAKD,KAAKU,2BAA2BT,KAAKW,0BAKlD,CAEAA,0BAA4BC,MAAOC,GAAoBb,KAAKF,MAAMgB,gBAAgBD,GAClFH,8BAAgCE,MAAOC,GAAoBb,KAAKF,MAAMiB,gBAAgBF,GAItFL,eAAeQ,GACXhB,KAAKF,MAAMmB,qBAAqBD,GAAIE,MAC/BC,GAAcnB,KAAKD,KAAKqB,eAAeD,KAC1CE,OAAOC,GACLC,QAAQC,IAAIF,IAGpB,sFCvCG,MAAMG,EACT5B,YAAY6B,GACR1B,KAAK0B,QAAUA,CAEnB,CAOAd,gBACI,OAAO,IAAIe,SAAQ,CAACC,EAASC,KACzBC,MAAM9B,KAAK0B,QAAS,CAACK,YAAa,YAC7Bb,MAAKc,IAEFL,QAAQM,IAAI,CAACD,EAASE,OAAQF,EAASG,SAClCjB,MAAK,EAAEkB,EAAMD,MACK,MAAXA,EACAP,EAAQQ,IAERb,QAAQC,IAAIa,KACZR,EAAO,wBAAwBM,KACnC,IACDd,OAAOgB,IACNd,QAAQC,IAAIa,GACZR,EAAO,oBAAoBQ,IAAM,GACnC,IACPhB,OAAOgB,IACNd,QAAQC,IAAIa,GACZR,EAAO,kBAAiB,GAC9B,GAEV,CAOAjB,mBAAmB0B,GACf,OAAO,IAAIX,SAAQ,CAACC,EAASC,KACzBC,MAAM,GAAG9B,KAAK0B,gBAAgBa,mBAAmBD,MAC5CpB,MAAKc,IAEFL,QAAQM,IAAI,CAACD,EAASE,OAAQF,EAASG,SAClCjB,MAAK,EAAEkB,EAAMD,MACK,MAAXA,EACAP,EAAQQ,GAERP,EAAO,wBAAwBM,IACnC,IACDd,OAAOgB,IACNR,EAAO,oBAAoBQ,IAAM,GACnC,IACPhB,OAAOgB,GAAQR,EAAO,oBAAmB,GAExD,CAQAjB,sBAAsBI,EAAIwB,GACtB,OAAO,IAAIb,SAAQ,CAACC,EAASC,KACzBC,MAAM,GAAG9B,KAAK0B,WAAWV,KAAMwB,IAAuB,CAACT,YAAa,YAAYb,MAAMc,IAClFL,QAAQM,IAAI,CAACD,EAASE,OAAQF,EAASG,SAClCjB,MAAK,EAAEkB,EAAMD,MACK,MAAXA,EACAP,EAAQQ,GAERP,EAAO,wBAAwBM,IACnC,IACDd,OAAOgB,IACNR,EAAO,kBAAiB,GAC1B,IAEPR,OAAM,IAAMQ,EAAO,uBAAqB,GAEnD,CAOAjB,iBAAiB6B,GACb,MAAMC,EAAU,CACZC,IAAKF,GAGHG,EAAiB,CACnBC,OAAQ,OACRC,QAAS,IAAIC,QAAQ,CAAE,eAAgB,qBACvChB,YAAa,UACbiB,KAAMC,KAAKC,UAAUR,IAGzB,OAAO,IAAIf,SAAQ,CAACC,EAASC,KACzBC,MAAM9B,KAAK0B,QAASkB,GAAgB1B,MAAKc,IAErCL,QAAQM,IAAI,CAACD,EAASmB,OAAQnB,EAASG,SAClCjB,MAAK,EAAEkC,EAAGjB,MACQ,MAAXA,EACAP,EAAQ,WAERC,EAAO,wBAAwBM,IACnC,IACDd,OAAOgB,IACNd,QAAQ8B,MAAM,kBAAkBhB,KAChCR,EAAO,kBAAkB,GAC3B,IACPR,OAAOgB,IACNd,QAAQ8B,MAAM,kBAAkBhB,KAChCR,EAAO,mBAAkB,GAC3B,GAEV,CAQAjB,qBAAqB0C,EAAMC,GAEvB,MAAMC,EAAW,IAAIC,SACrBD,EAASE,OAAO,OAAQJ,GACxBE,EAASE,OAAO,MAAOT,KAAKC,UAAUK,IAGtC,MAAMX,EAAiB,CACnBC,OAAQ,OACRd,YAAa,UACbiB,KAAMQ,GAIV,OAAO,IAAI7B,SAAQ,CAACC,EAASC,KACzBC,MAAM9B,KAAK0B,QAASkB,GAAgB1B,MAAKc,IAErCL,QAAQM,IAAI,CAACD,EAASmB,OAAQnB,EAASG,SAClCjB,MAAK,EAAEkC,EAAGjB,MACQ,MAAXA,EACAP,EAAQ,WAERC,EAAO,wBAAwBM,IACnC,IACDd,OAAOgB,IACNd,QAAQ8B,MAAM,kBAAkBhB,KAChCR,EAAO,kBAAkB,GAC3B,IACPR,OAAOgB,IACNd,QAAQ8B,MAAM,kBAAkBhB,KAChCR,EAAO,mBAAkB,GAC3B,GAMV,CAQAjB,2BAA2B0C,EAAMb,GAC7B,MAAMe,EAAW,IAAIC,SACrBD,EAASE,OAAO,OAAQJ,GACxBE,EAASE,OAAO,MAAOT,KAAKC,UAAUT,IAGtC,MAAMG,EAAiB,CACnBC,OAAQ,MACRG,KAAMQ,EACNzB,YAAa,WAIjB,OAAO,IAAIJ,SAAQ,CAACC,EAASC,KACzBC,MAAM,GAAG9B,KAAK0B,WAAWe,EAAa,KAAKG,GAAgB1B,MAAKc,IAE5DL,QAAQM,IAAI,CAACD,EAASmB,OAAQnB,EAASG,SAClCjB,MAAK,EAAEkC,EAAGjB,MACQ,MAAXA,EACAP,EAAQ,WAERC,EAAO,wBAAwBM,IACnC,IACDd,OAAOgB,IACNd,QAAQ8B,MAAM,kBAAkBhB,KAChCR,EAAO,kBAAkB,GAC3B,IACPR,OAAOgB,IACNd,QAAQ8B,MAAM,kBAAkBhB,KAChCR,EAAO,mBAAkB,GAC3B,GAGV,CAOAjB,iBAAiB6B,GACb,MAAMC,EAAU,CACZC,IAAKF,GAGHG,EAAiB,CACnBC,OAAQ,MACRC,QAAS,IAAIC,QAAQ,CAAE,eAAgB,qBACvChB,YAAa,UACbiB,KAAMC,KAAKC,UAAUR,IAIzB,OAAO,IAAIf,SAAQ,CAACC,EAASC,KACzBC,MAAM,GAAG9B,KAAK0B,WAAWe,EAAa,KAAKG,GAAgB1B,MAAKc,IAE5DL,QAAQM,IAAI,CAACD,EAASmB,OAAQnB,EAASG,SAClCjB,MAAK,EAAEc,EAAUG,MACC,MAAXA,EACAP,EAAQ,YAERL,QAAQ8B,MAAM,kBAAkBrB,KAChCH,EAAO,wBAAwBM,KACnC,IACDd,OAAOgB,IACNd,QAAQ8B,MAAM,kBAAkBhB,KAChCR,EAAO,kBAAkB,GAC3B,IACPR,OAAOgB,IACNd,QAAQ8B,MAAM,kBAAkBhB,KAChCR,EAAO,mBAAkB,GAC3B,GAGV,CAOAjB,uBAAuBI,GACnB,OAAO,IAAIW,SAAQ,CAACC,EAASC,KACzBC,MAAM,GAAG9B,KAAK0B,sBAAsBV,IAAM,CACtC6B,OAAQ,MACRd,YAAa,YACdb,MAAKc,IAEJL,QAAQM,IAAI,CAACD,EAASE,OAAQF,EAASG,SAClCjB,MAAK,EAAEkC,EAAGjB,MACQ,MAAXA,EACAP,EAAQ,WAERC,EAAO,wBAAwBM,IACnC,IACDd,OAAOgB,IACNR,EAAO,kBAAkB,GAC3B,IACPR,OAAO+B,IACNvB,EAAO,SAAS,GAClB,GAGV,CAOAjB,iBAAiBI,GACb,OAAO,IAAIW,SAAQ,CAACC,EAASC,KACzBC,MAAM,GAAG9B,KAAK0B,WAAWV,IAAM,CAC3B6B,OAAQ,SACRd,YAAa,YACdb,MAAKc,IAEJL,QAAQM,IAAI,CAACD,EAASmB,OAAQnB,EAASG,SAClCjB,MAAK,EAAEkB,EAAMD,MACK,MAAXA,EACAP,EAAQ,WAERC,EAAO,wBAAwBM,IACnC,IACDd,OAAOgB,IACNR,EAAO,kBAAkB,GAC3B,IACPR,OAAO+B,IACNvB,EAAO,wBAAuB,GAChC,GAGV,kJC9SG,MAAM8B,EAET9D,cACIG,KAAK4D,UAAY,IAAI,EAAAnC,UAAU,mDACnC,CAEAb,2BACI,OAAOZ,KAAK4D,UAAUC,SAC1B,CAEAjD,6BACI,IAAIkD,QAAsB9D,KAAK4D,UAAUC,UACzC,OAAO,IAAIlC,SAAQ,CAACC,EAASC,KACzB,IAAIkC,EAAsBD,EAAcE,QAAO7C,IAAkC,IAArBA,EAAU8C,SAClEF,EAAoBG,OAAS,EAC7BtC,EAAQmC,EAAoB,IAE5BlC,EAAO,6BACX,GAGR,CAEAjB,qBAAqBX,EAAauC,GAAsB,GACpD,OAAOxC,KAAK4D,UAAUO,gBAAgBlE,EAAauC,EACvD,CAGA5B,4BAA4BX,GACxB,OAAOD,KAAK4D,UAAUQ,iBAAiBnE,EAC3C,CAEAW,0BAA0BX,GACtB,OAAOD,KAAK4D,UAAUS,WAAWpE,EACrC,CAGAW,0BAA0B0D,GACtB,OAAOtE,KAAK4D,UAAUW,WAAWD,EACrC,CAIA1D,wBAAwB0D,GACpB,OAAOtE,KAAK4D,UAAUY,WAAWF,EAErC,qJC7CG,MAAMG,UAA2B,EAAAd,eACpC9D,cACI6E,OACJ,CAEA9D,sBAAsBC,GAElB,aADsBb,KAAK2E,kBAAkB9D,EAEjD,CAGAD,sBAAsBC,GAEnB,aADwBb,KAAK4E,oBAAoB/D,EAGpD,CAEAD,2BAA2BI,GAEvB,aADuBhB,KAAKQ,eAAeQ,EAE/C,4GCrBG,MAAM6D,EACThF,cACIG,KAAK8E,cAAgBC,SAASC,cAAc,2BAC5ChF,KAAKiF,oBAAsBF,SAASG,eAAe,yBACnDlF,KAAKmF,mBAAqBJ,SAASG,eAAe,wBAElDlF,KAAKoF,oBAAsBL,SAASG,eAAe,yBAEnDlF,KAAKqF,WAELrF,KAAKiF,oBAAoBK,iBAAiB,SAAS,KAC/CtF,KAAKqF,UAAU,IAGnBrF,KAAKmF,mBAAmBG,iBAAiB,SAAS,KAC9CtF,KAAKqF,UAAU,GAEvB,CAGAjE,eAAegB,GAEXpC,KAAKiF,oBAAoBM,MAAQnD,EAAY,MAC7CpC,KAAKmF,mBAAmBI,MAAQnD,EAAW,KAE3CpC,KAAKqF,UAET,CAEAA,WAEiD,GAAzCrF,KAAKiF,oBAAoBM,MAAMrB,QACS,GAAxClE,KAAKmF,mBAAmBI,MAAMrB,OAE9BlE,KAAKoF,oBAAoBI,UAAW,EAEpCxF,KAAKoF,oBAAoBI,UAAW,CAE5C,CAEA/E,2BAA2BgF,GACvBzF,KAAKoF,oBAAoBE,iBAAiB,SAAS,KAC/C,IAAII,EAAQtF,UAAUC,SAASC,QAAQC,MAAM,GAE7C,MAAMM,EAAkB6E,EAAQ,CAC5B1E,GAAK0E,EACLC,MAAQ3F,KAAKiF,oBAAoBM,MACjCpC,KAAOnD,KAAKmF,mBAAmBI,MAC/BtB,QAAS,GACT,CACA0B,MAAQ3F,KAAKiF,oBAAoBM,MACjCpC,KAAOnD,KAAKmF,mBAAmBI,MAC/BtB,QAAS,GAGAwB,EAAQ5E,GACdK,MAAMkC,IACTpD,KAAK4F,WAAW,IACjBvE,OAAOgB,IACNd,QAAQ8B,MAAMhB,EAAI,GACrB,GAET,CAEAuD,YAEI,OADA5F,KAAK8E,cAAce,UACZ,CACX,KCpEAC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,CAAC,GAOX,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,OACf,CCrBAJ,EAAoBO,EAAI,CAACH,EAASI,KACjC,IAAI,IAAIC,KAAOD,EACXR,EAAoBU,EAAEF,EAAYC,KAAST,EAAoBU,EAAEN,EAASK,IAC5EE,OAAOC,eAAeR,EAASK,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDT,EAAoBU,EAAI,CAACK,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFhB,EAAoBoB,EAAKhB,IACH,oBAAXiB,QAA0BA,OAAOC,aAC1CX,OAAOC,eAAeR,EAASiB,OAAOC,YAAa,CAAE9B,MAAO,WAE7DmB,OAAOC,eAAeR,EAAS,aAAc,CAAEZ,OAAO,GAAO,yLCClD,IAAI,EAAA3F,wBAAwB,IAAI,EAAA6E,mBAAsB,IAAI,EAAAI","sources":["webpack://ngacho-new/./app/controller/edit-contact-me-controller.js","webpack://ngacho-new/./app/model/base-models/base-model.js","webpack://ngacho-new/./app/model/base-models/contact-me-model.js","webpack://ngacho-new/./app/model/edit-contact-me-model.js","webpack://ngacho-new/./app/view/contact-me/admin/edit-contact-me-view.js","webpack://ngacho-new/webpack/bootstrap","webpack://ngacho-new/webpack/runtime/define property getters","webpack://ngacho-new/webpack/runtime/hasOwnProperty shorthand","webpack://ngacho-new/webpack/runtime/make namespace object","webpack://ngacho-new/./app/edit-contact-me-app.js"],"sourcesContent":["\n\nexport class EditContactMeController{\n\n    constructor(model, view){\n        this.model = model;\n        this.view = view;\n        this.contactMeId = '';\n\n        this.init();\n    }\n\n    init(){\n        let path_extension = decodeURI(location.search);\n        this.contactMeId = path_extension.slice(1);\n\n        if(this.contactMeId){\n            this.fetchContactMe(this.contactMeId);\n            this.view.bindHandlePublishContactMe(this.handlePublishUpdatedContactMe);\n        }else{\n            this.view.bindHandlePublishContactMe(this.handlePublishNewContactMe);\n        }\n        \n        \n        \n    }\n\n    handlePublishNewContactMe = async (contactMeObject) => this.model.uploadContactMe(contactMeObject);\n    handlePublishUpdatedContactMe = async (contactMeObject) => this.model.updateContactMe(contactMeObject);\n    \n    \n\n    fetchContactMe(id) {\n        this.model.fetchContactMeFromDb(id).then(\n            (contactMe) => this.view.setUpContactMe(contactMe)\n        ).catch((errMessage) =>\n            console.log(errMessage)\n        );\n\n    }\n}","export class BaseModel{\n    constructor(baseUrl){\n        this.baseUrl = baseUrl;\n\n    }\n\n\n    /**\n     * \n     * @returns {Promise with array of objects}\n     */\n    async getList(){\n        return new Promise((resolve, reject) => {\n            fetch(this.baseUrl, {credentials: 'include'})\n                .then(response => {\n                    // Process the response body and status code simultaneously\n                    Promise.all([response.json(), response.status])\n                        .then(([data, status]) => {\n                            if (status === 200) {\n                                resolve(data);\n                            } else {\n                                console.log(err);\n                                reject(`Failed with response ${status}`)\n                            }\n                        }).catch((err) => {\n                            console.log(err);\n                            reject(`Failed response: ${err}`);\n                        });\n                }).catch((err) => {\n                    console.log(err);\n                    reject(\"Failed to fetch\")\n            });\n        });\n    }\n\n    /**\n     * \n     * @param {a tag in series} tag \n     * @returns promise of array of objects\n     */\n    async getListByTag(tag){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/tags/${encodeURIComponent(tag)}`)\n                .then(response => {\n                    // Process the response body and status code simultaneously\n                    Promise.all([response.json(), response.status])\n                        .then(([data, status]) => {\n                            if (status === 200) {\n                                resolve(data);\n                            } else {\n                                reject(`Failed with response ${status}`)\n                            }\n                        }).catch((err) => {\n                            reject(`Failed response: ${err}`);\n                        });\n                }).catch((err) => reject(\"Failed to fetch\"));\n        });\n    }\n\n\n    /**\n     * \n     * @param {object id} id \n     * @returns promise of single object\n     */\n    async getListItemById(id, serverSideRendering){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${id}/${serverSideRendering}`, {credentials: 'include'}).then((response) => {\n                Promise.all([response.json(), response.status])\n                    .then(([data, status]) => {\n                        if (status === 200) {\n                            resolve(data);\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        reject(\"Failed response\")\n                    });\n\n            }).catch(() => reject(\"Failed to fetch id\"))\n        });\n    }\n\n    /**\n     * \n     * @param {item we want to create} contents \n     * @returns status of item creation\n     */\n    async createItem(contents){\n        const payload = {\n            doc: contents\n        }\n\n        const requestOptions = {\n            method: 'POST',\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n            credentials: 'include',\n            body: JSON.stringify(payload)\n        };\n\n        return new Promise((resolve, reject) => {\n            fetch(this.baseUrl, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`);\n                reject(\"Failed response.\")\n            });\n        });\n    }\n\n    /**\n     * \n     * @param {file we want to upload} file \n     * @param {any data associated with the file} itemObject \n     * @returns \n     */\n    async createFileItem(file, itemObject){\n        \n        const formData = new FormData();\n        formData.append('file', file);\n        formData.append('doc', JSON.stringify(itemObject));\n\n\n        const requestOptions = {\n            method: 'POST',\n            credentials: 'include',\n            body: formData\n        }\n\n\n        return new Promise((resolve, reject) => {\n            fetch(this.baseUrl, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`);\n                reject(\"Failed response.\")\n            });\n        });\n\n        \n\n\n    }\n\n    /**\n     * \n     * @param {file object we want to update} file \n     * @param {data object for metadata of the file} contents \n     * @returns the status of the update\n     */\n    async updateFileItemObject(file, contents){\n        const formData = new FormData();\n        formData.append('file', file);\n        formData.append('doc', JSON.stringify(contents));\n\n\n        const requestOptions = {\n            method: 'PUT',\n            body: formData,\n            credentials: 'include'\n        }\n\n\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${contents['id']}`, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`);\n                reject(\"Failed response.\")\n            });\n        });\n\n    }\n\n    /**\n     * \n     * @param {data object of item to be update} contents \n     * @returns status of updated item\n     */\n    async updateItem(contents){\n        const payload = {\n            doc: contents\n        }\n\n        const requestOptions = {\n            method: 'PUT',\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n            credentials: 'include',\n            body: JSON.stringify(payload)\n        }\n\n\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${contents['id']}`, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([response, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            console.error(`ERROR LEVEL 2: ${response}`);\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`)\n                reject(\"Failed response.\")\n            });\n        });\n\n    }\n\n    /**\n     * used for activating and deactivating items\n     * @param {id of item we want to update} id \n     * @returns status of update\n     */\n    async updateItemStatus(id){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/set-active/${id}`, {\n                method: 'PUT',\n                credentials: 'include'\n            }).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.json(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        reject(\"Failed response\");\n                    });\n            }).catch((_) => {\n                reject(\"Failed\");\n            });\n        });\n\n    }\n\n    /**\n     * \n     * @param {id of item to be deleted} id \n     * @returns \n     */\n    async deleteItem(id){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${id}`, {\n                method: 'DELETE',\n                credentials: 'include'\n            }).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([data, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        reject(\"Failed response\");\n                    });\n            }).catch((_) => {\n                reject(\"Failed to delete text\")\n            });\n        });\n\n    }\n\n    \n\n    \n}","import { BaseModel } from \"./base-model.js\";\n\nexport class ContactMeModel {\n\n    constructor() {\n        this.baseModel = new BaseModel('https://api.ngacho.com/database/contact-me-texts');\n    }\n\n    async fetchContactMeList() {\n        return this.baseModel.getList();\n    }\n\n    async fetchActiveContactMe() {\n        let contactMeList = await this.baseModel.getList();\n        return new Promise((resolve, reject) => {\n            let activeContactMeList = contactMeList.filter(contactMe => contactMe.active === true);\n            if (activeContactMeList.length > 0) {\n                resolve(activeContactMeList[0]);\n            } else {\n                reject(\"No active contact me found\");\n            }\n        });\n\n    }\n\n    async fetchContactMe(contactMeId, serverSideRendering = false) {\n        return this.baseModel.getListItemById(contactMeId, serverSideRendering);\n    }\n\n\n    async updateContactMeStatus(contactMeId) {\n        return this.baseModel.updateItemStatus(contactMeId);\n    }\n\n    async deleteContactMeText(contactMeId) {\n        return this.baseModel.deleteItem(contactMeId);\n    }\n\n\n    async updateContactMeText(contactMeContents){\n        return this.baseModel.updateItem(contactMeContents);\n    }\n\n\n\n    async postContactMeText(contactMeContents) {\n        return this.baseModel.createItem(contactMeContents);\n\n    }\n}","import { ContactMeModel } from \"./base-models/contact-me-model.js\";\n\n\nexport class EditContactMeModel extends ContactMeModel{\n    constructor(){\n        super();\n    }\n\n    async uploadContactMe(contactMeObject) {    \n        const postRef = await this.postContactMeText(contactMeObject);\n        return postRef;\n    }\n\n\n    async updateContactMe(contactMeObject){\n       const updateRef = await this.updateContactMeText(contactMeObject);\n       return updateRef;\n\n    }\n\n    async fetchContactMeFromDb(id){\n        const fetchRef = await this.fetchContactMe(id)\n        return fetchRef;\n    }\n}","\n\nexport class EditContactMeView{\n    constructor(){\n        this.contactMeForm = document.querySelector(\".contactme-details-form\");\n        this.contactMeTitleInput = document.getElementById(\"contactme-title-input\");\n        this.contactMeTextInput = document.getElementById(\"contactme-text-input\");\n\n        this.postContactMeButton = document.getElementById(\"post-contactme-button\");\n\n        this.validate();\n\n        this.contactMeTitleInput.addEventListener(\"input\", ()=>{\n            this.validate();\n        });\n\n        this.contactMeTextInput.addEventListener(\"input\", ()=>{\n            this.validate();\n        });\n    }\n\n\n    setUpContactMe(data) {\n\n        this.contactMeTitleInput.value = data['title'];\n        this.contactMeTextInput.value = data['text'];\n\n        this.validate();\n    \n    }\n\n    validate(){\n        if(\n            this.contactMeTitleInput.value.length != 0 &&\n            this.contactMeTextInput.value.length != 0 \n            ){\n            this.postContactMeButton.disabled = false;\n        }else{\n            this.postContactMeButton.disabled = true;\n        }\n    }\n\n    bindHandlePublishContactMe(handler) {\n        this.postContactMeButton.addEventListener(\"click\", ()=>{\n            let objId = decodeURI(location.search).slice(1);\n            \n            const contactMeObject = objId ? {\n                id : objId,\n                title : this.contactMeTitleInput.value,\n                text : this.contactMeTextInput.value,\n                active : false\n            } : {\n                title : this.contactMeTitleInput.value,\n                text : this.contactMeTextInput.value,\n                active : false\n            }\n\n            var status = handler(contactMeObject);\n            status.then((_)=>{\n                this.resetForm();\n            }).catch((err)=>{\n                console.error(err);\n            })\n        });\n    }\n\n    resetForm(){\n        this.contactMeForm.submit();\n        return false;\n    }\n\n\n\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\nimport { EditContactMeController } from \"./controller/edit-contact-me-controller.js\"\nimport { EditContactMeModel } from \"./model/edit-contact-me-model.js\"\nimport { EditContactMeView } from \"./view/contact-me/admin/edit-contact-me-view.js\"\n\n\nconst app = new EditContactMeController(new EditContactMeModel(), new EditContactMeView())"],"names":["EditContactMeController","constructor","model","view","this","contactMeId","init","path_extension","decodeURI","location","search","slice","fetchContactMe","bindHandlePublishContactMe","handlePublishUpdatedContactMe","handlePublishNewContactMe","async","contactMeObject","uploadContactMe","updateContactMe","id","fetchContactMeFromDb","then","contactMe","setUpContactMe","catch","errMessage","console","log","BaseModel","baseUrl","Promise","resolve","reject","fetch","credentials","response","all","json","status","data","err","tag","encodeURIComponent","serverSideRendering","contents","payload","doc","requestOptions","method","headers","Headers","body","JSON","stringify","text","_","error","file","itemObject","formData","FormData","append","ContactMeModel","baseModel","getList","contactMeList","activeContactMeList","filter","active","length","getListItemById","updateItemStatus","deleteItem","contactMeContents","updateItem","createItem","EditContactMeModel","super","postContactMeText","updateContactMeText","EditContactMeView","contactMeForm","document","querySelector","contactMeTitleInput","getElementById","contactMeTextInput","postContactMeButton","validate","addEventListener","value","disabled","handler","objId","title","resetForm","submit","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag"],"sourceRoot":""}