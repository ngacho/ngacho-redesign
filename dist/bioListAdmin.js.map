{"version":3,"file":"bioListAdmin.js","mappings":"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","sources":["webpack://ngacho-new/./app/controller/bio-list-controller.js","webpack://ngacho-new/./app/model/base-models/base-model.js","webpack://ngacho-new/./app/model/base-models/bio-model.js","webpack://ngacho-new/./app/model/bio-list-model.js","webpack://ngacho-new/./app/view/bio/admin/bio-list-view.js","webpack://ngacho-new/webpack/bootstrap","webpack://ngacho-new/webpack/runtime/define property getters","webpack://ngacho-new/webpack/runtime/hasOwnProperty shorthand","webpack://ngacho-new/webpack/runtime/make namespace object","webpack://ngacho-new/./app/bio-list-app.js"],"sourcesContent":["\n\nexport class BioListController{\n\n    constructor (bioListView, bioListModel){\n        this.model = bioListModel;\n        this.view = bioListView;\n\n        this.init();\n\n    }\n\n    init(){\n        this.model.getBioList().then((bios) => {\n            this.onBioListChanged(bios);\n        }).catch((err)=>{\n            console.error(err);\n        });\n\n        this.view.bindDeleteBio(this.handleDeleteBioStatus);\n        this.view.bindMakeBioActive(this.handleUpdateBioStatus);\n\n\n    }\n\n    handleDeleteBioStatus = async(bioId) => this.model.deleteBioFromDb(bioId);\n    handleUpdateBioStatus = async(bioId) => this.model.updateActiveBio(bioId);\n\n    onBioListChanged = (bios) => {\n        this.view.setUpBios(bios);\n    }\n\n\n    \n}","export class BaseModel{\n    constructor(baseUrl){\n        this.baseUrl = baseUrl;\n\n    }\n\n\n    /**\n     * \n     * @returns {Promise with array of objects}\n     */\n    async getList(){\n        return new Promise((resolve, reject) => {\n            fetch(this.baseUrl, {credentials: 'include'})\n                .then(response => {\n                    // Process the response body and status code simultaneously\n                    Promise.all([response.json(), response.status])\n                        .then(([data, status]) => {\n                            if (status === 200) {\n                                resolve(data);\n                            } else {\n                                console.log(err);\n                                reject(`Failed with response ${status}`)\n                            }\n                        }).catch((err) => {\n                            console.log(err);\n                            reject(`Failed response: ${err}`);\n                        });\n                }).catch((err) => {\n                    console.log(err);\n                    reject(\"Failed to fetch\")\n            });\n        });\n    }\n\n    /**\n     * \n     * @param {a tag in series} tag \n     * @returns promise of array of objects\n     */\n    async getListByTag(tag){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/tags/${encodeURIComponent(tag)}`)\n                .then(response => {\n                    // Process the response body and status code simultaneously\n                    Promise.all([response.json(), response.status])\n                        .then(([data, status]) => {\n                            if (status === 200) {\n                                resolve(data);\n                            } else {\n                                reject(`Failed with response ${status}`)\n                            }\n                        }).catch((err) => {\n                            reject(`Failed response: ${err}`);\n                        });\n                }).catch((err) => reject(\"Failed to fetch\"));\n        });\n    }\n\n\n    /**\n     * \n     * @param {object id} id \n     * @returns promise of single object\n     */\n    async getListItemById(id, serverSideRendering){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${id}/${serverSideRendering}`, {credentials: 'include'}).then((response) => {\n                Promise.all([response.json(), response.status])\n                    .then(([data, status]) => {\n                        if (status === 200) {\n                            resolve(data);\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        reject(\"Failed response\")\n                    });\n\n            }).catch(() => reject(\"Failed to fetch id\"))\n        });\n    }\n\n    /**\n     * \n     * @param {item we want to create} contents \n     * @returns status of item creation\n     */\n    async createItem(contents){\n        const payload = {\n            doc: contents\n        }\n\n        const requestOptions = {\n            method: 'POST',\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n            credentials: 'include',\n            body: JSON.stringify(payload)\n        };\n\n        return new Promise((resolve, reject) => {\n            fetch(this.baseUrl, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`);\n                reject(\"Failed response.\")\n            });\n        });\n    }\n\n    /**\n     * \n     * @param {file we want to upload} file \n     * @param {any data associated with the file} itemObject \n     * @returns \n     */\n    async createFileItem(file, itemObject){\n        \n        const formData = new FormData();\n        formData.append('file', file);\n        formData.append('doc', JSON.stringify(itemObject));\n\n\n        const requestOptions = {\n            method: 'POST',\n            credentials: 'include',\n            body: formData\n        }\n\n\n        return new Promise((resolve, reject) => {\n            fetch(this.baseUrl, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`);\n                reject(\"Failed response.\")\n            });\n        });\n\n        \n\n\n    }\n\n    /**\n     * \n     * @param {file object we want to update} file \n     * @param {data object for metadata of the file} contents \n     * @returns the status of the update\n     */\n    async updateFileItemObject(file, contents){\n        const formData = new FormData();\n        formData.append('file', file);\n        formData.append('doc', JSON.stringify(contents));\n\n\n        const requestOptions = {\n            method: 'PUT',\n            body: formData,\n            credentials: 'include'\n        }\n\n\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${contents['id']}`, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`);\n                reject(\"Failed response.\")\n            });\n        });\n\n    }\n\n    /**\n     * \n     * @param {data object of item to be update} contents \n     * @returns status of updated item\n     */\n    async updateItem(contents){\n        const payload = {\n            doc: contents\n        }\n\n        const requestOptions = {\n            method: 'PUT',\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n            credentials: 'include',\n            body: JSON.stringify(payload)\n        }\n\n\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${contents['id']}`, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([response, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            console.error(`ERROR LEVEL 2: ${response}`);\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`)\n                reject(\"Failed response.\")\n            });\n        });\n\n    }\n\n    /**\n     * used for activating and deactivating items\n     * @param {id of item we want to update} id \n     * @returns status of update\n     */\n    async updateItemStatus(id){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/set-active/${id}`, {\n                method: 'PUT',\n                credentials: 'include'\n            }).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.json(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        reject(\"Failed response\");\n                    });\n            }).catch((_) => {\n                reject(\"Failed\");\n            });\n        });\n\n    }\n\n    /**\n     * \n     * @param {id of item to be deleted} id \n     * @returns \n     */\n    async deleteItem(id){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${id}`, {\n                method: 'DELETE',\n                credentials: 'include'\n            }).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([data, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        reject(\"Failed response\");\n                    });\n            }).catch((_) => {\n                reject(\"Failed to delete text\")\n            });\n        });\n\n    }\n\n    \n\n    \n}","import { BaseModel } from \"./base-model.js\";\n\nexport class BioModel{\n    constructor(){\n        this.baseModel = new BaseModel(\"https://api.ngacho.com/database/bios\");\n        \n    }\n\n\n    async fetchBios(){\n        return this.baseModel.getList();\n    }\n\n    async fetchBioById(id){\n        return this.baseModel.getListItemById(id);\n    }\n\n    async purgeBio(bioId){\n        return this.baseModel.deleteItem(bioId);\n    }\n\n    async updateBioStatus(bioId) {\n        return this.baseModel.updateItemStatus(bioId);\n    }\n\n    async updateBioWithFile(file, bioObject){\n        return this.baseModel.updateFileItemObject(file, bioObject);\n    }\n\n    async updateBio(bioObject){\n        return this.baseModel.updateItem(bioObject);\n    }\n\n    async publishBio(file, bioObject){\n        return this.baseModel.createFileItem(file, bioObject);\n    }\n\n\n\n\n}","import { BioModel } from \"./base-models/bio-model.js\";\n\nexport class BioListModel extends BioModel {\n\n    constructor() {\n        super();\n\n    }\n\n\n    async getBioList() {\n        let bioListRef = this.fetchBios();\n        return bioListRef;\n    }\n\n    async deleteBioFromDb(bioId){\n        let deleteRef = this.purgeBio(bioId);\n        return deleteRef;\n        \n    }\n\n    async updateActiveBio(bioId){\n        let updateStatus = this.updateBioStatus(bioId);\n        return updateStatus;\n    }\n\n}","export class BioListView {\n    constructor() {\n        this.biolistGallery = document.querySelector('.bio-gallery')\n    }\n\n\n    setUpBios(bios) {\n        for (const bio of bios) {\n            const id = bio['id'];\n\n            const bioItem = document.createElement('div');\n            bioItem.className = \"bio-item\";\n\n            let figure = document.createElement('figure');\n            let imageHolder = document.createElement('img');\n            imageHolder.src = bio['publicUrl'];\n            imageHolder.className = 'bio-photo';\n\n            figure.appendChild(imageHolder);\n\n            const bioTitle = document.createElement('h3');\n            bioTitle.className = \"bio-title\"\n            var title = document.createTextNode(bio['title']);\n            bioTitle.onclick = function () {\n                location.href =  `/admin/edit-bio/?${id}`;\n            }\n            bioTitle.appendChild(title);\n\n\n            const bioText = document.createElement('p');\n            bioText.className = \"bio-text\"\n            var text = document.createTextNode(bio['text']);\n            bioText.appendChild(text);\n\n\n            const iconsWrapper = document.createElement('div');\n            iconsWrapper.className = \"icons-wrapper\";\n\n            const checkMark = document.createElement('i');\n            checkMark.className = `fa-solid fa-circle-check activate-${id}`;\n\n            if (bio['active']) {\n                checkMark.className += \" active\";\n            }\n\n            const deleteMark = document.createElement('i');\n            deleteMark.className = `fa-solid fa-trash delete-${id}`;\n\n            iconsWrapper.appendChild(checkMark);\n            iconsWrapper.appendChild(deleteMark);\n\n            bioItem.appendChild(figure);\n            bioItem.appendChild(bioTitle);\n            bioItem.appendChild(bioText);\n            bioItem.appendChild(iconsWrapper);\n\n            this.biolistGallery.appendChild(bioItem);\n\n        }\n\n    }\n\n    bindDeleteBio(handler) {\n        this.biolistGallery.addEventListener('click', e => {\n            if (e.target && e.target.nodeName == 'I' && e.target.className.includes(\"fa-trash\")) {\n\n                const id = e.target.className.replace(\"fa-solid fa-trash delete-\", '');\n\n\n                var status = handler(id);\n                status.then((_) => {\n                    console.log(\"Deletion Successful\");\n                }).catch((err) => {\n                    console.error(err)\n                })\n\n            }\n        });\n\n    }\n\n    bindMakeBioActive(handler) {\n        this.biolistGallery.addEventListener('click', e => {\n            if (e.target && e.target.nodeName == 'I' && e.target.className.includes('fa-circle-check')) {\n                if (!e.target.className.includes(\"active\")) {\n                    const id = e.target.className.replace(\"fa-solid fa-circle-check activate-\", '');\n                    var status = handler(id);\n                    status.then((_) => {\n                        this.activateNewlySelectedTag(id);\n                    }).catch((err) => {\n                        console.error(err)\n                    });\n                }\n            }\n\n        });\n    }\n\n    activateNewlySelectedTag(id) {\n        var checkMarks = this.biolistGallery.getElementsByClassName('fa-circle-check');\n        for (const checkMark of checkMarks) {\n            const checkMarkId = checkMark.className.replace(\"fa-solid fa-circle-check activate-\", '');\n            checkMark.className = checkMark.className.replace('active', '')\n            if (id === checkMarkId) {\n                checkMark.className += \" active\"\n            }\n\n        }\n    }\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { BioListController } from \"./controller/bio-list-controller.js\";\nimport { BioListModel } from \"./model/bio-list-model.js\";\nimport { BioListView } from \"./view/bio/admin/bio-list-view.js\";\n\nconst app = new BioListController(new BioListView(), new BioListModel());"],"names":["BioListController","constructor","bioListView","bioListModel","this","model","view","init","getBioList","then","bios","onBioListChanged","catch","err","console","error","bindDeleteBio","handleDeleteBioStatus","bindMakeBioActive","handleUpdateBioStatus","async","bioId","deleteBioFromDb","updateActiveBio","setUpBios","BaseModel","baseUrl","Promise","resolve","reject","fetch","credentials","response","all","json","status","data","log","tag","encodeURIComponent","id","serverSideRendering","contents","payload","doc","requestOptions","method","headers","Headers","body","JSON","stringify","text","_","file","itemObject","formData","FormData","append","BioModel","baseModel","getList","getListItemById","deleteItem","updateItemStatus","bioObject","updateFileItemObject","updateItem","createFileItem","BioListModel","super","fetchBios","purgeBio","updateBioStatus","BioListView","biolistGallery","document","querySelector","bio","bioItem","createElement","className","figure","imageHolder","src","appendChild","bioTitle","title","createTextNode","onclick","location","href","bioText","iconsWrapper","checkMark","deleteMark","handler","addEventListener","e","target","nodeName","includes","replace","activateNewlySelectedTag","checkMarks","getElementsByClassName","checkMarkId","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value"],"sourceRoot":""}