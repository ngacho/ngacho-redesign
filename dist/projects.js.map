{"version":3,"file":"projects.js","mappings":";;;;;;;;;;;;;;;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;ACvBO;AACP;AACA;;AAEA;;;AAGA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iCAAiC,uBAAuB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,+DAA+D,OAAO;AACtE;AACA,yBAAyB;AACzB;AACA,uDAAuD,IAAI;AAC3D,yBAAyB;AACzB,iBAAiB;AACjB;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA,qBAAqB,aAAa,QAAQ,wBAAwB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,+DAA+D,OAAO;AACtE;AACA,yBAAyB;AACzB,uDAAuD,IAAI;AAC3D,yBAAyB;AACzB,iBAAiB;AACjB,SAAS;AACT;;;AAGA;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA,qBAAqB,aAAa,GAAG,GAAG,GAAG,oBAAoB,IAAI,uBAAuB;AAC1F;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,2DAA2D,OAAO;AAClE;AACA,qBAAqB;AACrB;AACA,qBAAqB;;AAErB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,oCAAoC;AACvE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,2DAA2D,OAAO;AAClE;AACA,qBAAqB;AACrB,wDAAwD,IAAI;AAC5D;AACA,qBAAqB;AACrB,aAAa;AACb,gDAAgD,IAAI;AACpD;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA,eAAe,wBAAwB;AACvC,eAAe,mCAAmC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,2DAA2D,OAAO;AAClE;AACA,qBAAqB;AACrB,wDAAwD,IAAI;AAC5D;AACA,qBAAqB;AACrB,aAAa;AACb,gDAAgD,IAAI;AACpD;AACA,aAAa;AACb,SAAS;;AAET;;;AAGA;;AAEA;AACA;AACA,eAAe,+BAA+B;AAC9C,eAAe,sCAAsC;AACrD;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA,qBAAqB,aAAa,GAAG,eAAe;AACpD;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,2DAA2D,OAAO;AAClE;AACA,qBAAqB;AACrB,wDAAwD,IAAI;AAC5D;AACA,qBAAqB;AACrB,aAAa;AACb,gDAAgD,IAAI;AACpD;AACA,aAAa;AACb,SAAS;;AAET;;AAEA;AACA;AACA,eAAe,kCAAkC;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,oCAAoC;AACvE;AACA;AACA;;;AAGA;AACA,qBAAqB,aAAa,GAAG,eAAe;AACpD;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,4DAA4D,SAAS;AACrE,2DAA2D,OAAO;AAClE;AACA,qBAAqB;AACrB,wDAAwD,IAAI;AAC5D;AACA,qBAAqB;AACrB,aAAa;AACb,gDAAgD,IAAI;AACpD;AACA,aAAa;AACb,SAAS;;AAET;;AAEA;AACA;AACA,eAAe,8BAA8B;AAC7C;AACA;AACA;AACA;AACA,qBAAqB,aAAa,cAAc,GAAG;AACnD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,2DAA2D,OAAO;AAClE;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB,aAAa;AACb;AACA,aAAa;AACb,SAAS;;AAET;;AAEA;AACA;AACA,eAAe,0BAA0B;AACzC;AACA;AACA;AACA;AACA,qBAAqB,aAAa,GAAG,GAAG;AACxC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,2DAA2D,OAAO;AAClE;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB,aAAa;AACb;AACA,aAAa;AACb,SAAS;;AAET;;AAEA;;AAEA;AACA;;;;;;;;;;;;;;;ACrT4C;;AAErC;;AAEP;AACA,6BAA6B,qDAAS;AACtC;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;;;;;;;;;;;;;;;ACtCmE;;AAE5D,+BAA+B,4EAAgB;AACtD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;ACbO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,aAAa;AAC1D;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;;AAGA;;;;;;UCrHA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACNwE;AACS;AAChB;;AAEjE,gBAAgB,0FAAqB,KAAK,0EAAgB,QAAQ,iFAAe,I","sources":["webpack://ngacho-new/./app/controller/projects-list-controller.js","webpack://ngacho-new/./app/model/base-models/base-model.js","webpack://ngacho-new/./app/model/base-models/projects-model.js","webpack://ngacho-new/./app/model/project-list-model.js","webpack://ngacho-new/./app/view/projects/projects-list-view.js","webpack://ngacho-new/webpack/bootstrap","webpack://ngacho-new/webpack/runtime/define property getters","webpack://ngacho-new/webpack/runtime/hasOwnProperty shorthand","webpack://ngacho-new/webpack/runtime/make namespace object","webpack://ngacho-new/./app/projects-list-app.js"],"sourcesContent":["\n\nexport class ProjectListController{\n \n    constructor(viewProjectModel, viewProjectView){\n        this.model = viewProjectModel;\n        this.view = viewProjectView;\n        this.init();\n    }\n\n    init(){\n        // Display initial projects\n        this.model.getProjects().then((projects) => {\n            this.onProjectListChanged(projects);\n        }).catch((err)=>{\n            console.error(\"error \" + err);\n        });\n        \n    }\n\n    onProjectListChanged = (projects) => {\n        this.view.displayProjects(projects);\n    }\n}","export class BaseModel{\n    constructor(baseUrl){\n        this.baseUrl = baseUrl;\n\n    }\n\n\n    /**\n     * \n     * @returns {Promise with array of objects}\n     */\n    async getList(){\n        return new Promise((resolve, reject) => {\n            fetch(this.baseUrl, {credentials: 'include'})\n                .then(response => {\n                    // Process the response body and status code simultaneously\n                    Promise.all([response.json(), response.status])\n                        .then(([data, status]) => {\n                            if (status === 200) {\n                                resolve(data);\n                            } else {\n                                console.log(err);\n                                reject(`Failed with response ${status}`)\n                            }\n                        }).catch((err) => {\n                            console.log(err);\n                            reject(`Failed response: ${err}`);\n                        });\n                }).catch((err) => {\n                    console.log(err);\n                    reject(\"Failed to fetch\")\n            });\n        });\n    }\n\n    /**\n     * \n     * @param {a tag in series} tag \n     * @returns promise of array of objects\n     */\n    async getListByTag(tag){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/tags/${encodeURIComponent(tag)}`)\n                .then(response => {\n                    // Process the response body and status code simultaneously\n                    Promise.all([response.json(), response.status])\n                        .then(([data, status]) => {\n                            if (status === 200) {\n                                resolve(data);\n                            } else {\n                                reject(`Failed with response ${status}`)\n                            }\n                        }).catch((err) => {\n                            reject(`Failed response: ${err}`);\n                        });\n                }).catch((err) => reject(\"Failed to fetch\"));\n        });\n    }\n\n\n    /**\n     * \n     * @param {object id} id \n     * @returns promise of single object\n     */\n    async getListItemById(id, serverSideRendering){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${id}/${serverSideRendering}`, {credentials: 'include'}).then((response) => {\n                Promise.all([response.json(), response.status])\n                    .then(([data, status]) => {\n                        if (status === 200) {\n                            resolve(data);\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        reject(\"Failed response\")\n                    });\n\n            }).catch(() => reject(\"Failed to fetch id\"))\n        });\n    }\n\n    /**\n     * \n     * @param {item we want to create} contents \n     * @returns status of item creation\n     */\n    async createItem(contents){\n        const payload = {\n            doc: contents\n        }\n\n        const requestOptions = {\n            method: 'POST',\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n            credentials: 'include',\n            body: JSON.stringify(payload)\n        };\n\n        return new Promise((resolve, reject) => {\n            fetch(this.baseUrl, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`);\n                reject(\"Failed response.\")\n            });\n        });\n    }\n\n    /**\n     * \n     * @param {file we want to upload} file \n     * @param {any data associated with the file} itemObject \n     * @returns \n     */\n    async createFileItem(file, itemObject){\n        \n        const formData = new FormData();\n        formData.append('file', file);\n        formData.append('doc', JSON.stringify(itemObject));\n\n\n        const requestOptions = {\n            method: 'POST',\n            credentials: 'include',\n            body: formData\n        }\n\n\n        return new Promise((resolve, reject) => {\n            fetch(this.baseUrl, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`);\n                reject(\"Failed response.\")\n            });\n        });\n\n        \n\n\n    }\n\n    /**\n     * \n     * @param {file object we want to update} file \n     * @param {data object for metadata of the file} contents \n     * @returns the status of the update\n     */\n    async updateFileItemObject(file, contents){\n        const formData = new FormData();\n        formData.append('file', file);\n        formData.append('doc', JSON.stringify(contents));\n\n\n        const requestOptions = {\n            method: 'PUT',\n            body: formData,\n            credentials: 'include'\n        }\n\n\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${contents['id']}`, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`);\n                reject(\"Failed response.\")\n            });\n        });\n\n    }\n\n    /**\n     * \n     * @param {data object of item to be update} contents \n     * @returns status of updated item\n     */\n    async updateItem(contents){\n        const payload = {\n            doc: contents\n        }\n\n        const requestOptions = {\n            method: 'PUT',\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n            credentials: 'include',\n            body: JSON.stringify(payload)\n        }\n\n\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${contents['id']}`, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([response, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            console.error(`ERROR LEVEL 2: ${response}`);\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`)\n                reject(\"Failed response.\")\n            });\n        });\n\n    }\n\n    /**\n     * used for activating and deactivating items\n     * @param {id of item we want to update} id \n     * @returns status of update\n     */\n    async updateItemStatus(id){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/set-active/${id}`, {\n                method: 'PUT',\n                credentials: 'include'\n            }).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.json(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        reject(\"Failed response\");\n                    });\n            }).catch((_) => {\n                reject(\"Failed\");\n            });\n        });\n\n    }\n\n    /**\n     * \n     * @param {id of item to be deleted} id \n     * @returns \n     */\n    async deleteItem(id){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${id}`, {\n                method: 'DELETE',\n                credentials: 'include'\n            }).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([data, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        reject(\"Failed response\");\n                    });\n            }).catch((_) => {\n                reject(\"Failed to delete text\")\n            });\n        });\n\n    }\n\n    \n\n    \n}","import { BaseModel } from \"./base-model.js\";\n\nexport class ProjectBaseModel {\n\n    constructor() { \n        this.baseModel = new BaseModel(\"https://api.ngacho.com/database/projects\");\n    }\n    \n\n\n    async fetchProjects() {\n        return this.baseModel.getList();\n        \n    }\n\n    async fetchProjectById(id, serverSideRendering = false) {\n        return this.baseModel.getListItemById(id, serverSideRendering);\n    }\n\n    async deleteProject(id){\n        return this.baseModel.deleteItem(id);\n\n    }\n\n\n    async updateProjectWithFile(file, bioObject){\n        return this.baseModel.updateFileItemObject(file, bioObject);\n    }\n\n    async updateProject(bioObject){\n        return this.baseModel.updateItem(bioObject);\n    }\n\n    async publishProject(file, bioObject){\n        return this.baseModel.createFileItem(file, bioObject);\n    }\n\n\n}","import { ProjectBaseModel } from \"./base-models/projects-model.js\";\n\nexport class ProjectListModel extends ProjectBaseModel {\n    constructor(){\n        super();\n    }\n\n    async getProjects(){\n        var projects = await this.fetchProjects();\n        return projects;\n    }\n\n    \n    \n}","\nexport class ProjectListView {\n    constructor() {\n        this.projects_carousel = document.querySelector(\".projects-carousel\");\n        this.right_click_button = document.querySelector(\".right-control\");\n        this.left_click_button = document.querySelector(\".left-control\");\n        this.right_click_button.addEventListener('click', ()=>{\n            this.scrollTowardsRight();\n        })\n        this.left_click_button.addEventListener('click', ()=>{\n            this.scrollTowardsLeft();\n        })\n        \n        this.scrollAmount = 0;\n        \n        // this.initiateCarousel();\n    }\n\n\n    displayProjects(projects) {\n        for (const project of projects) {\n            const projectId = project[\"id\"];\n            const projectTitle = projectId.substring(0, projectId.length-5);\n            \n            const projectCoverUrl = project[\"publicUrl\"];\n            const projectLangs = project[\"projectLanguages\"];\n            const projectExtraInfoLink = project[\"projectExtraInfoUrl\"];\n\n            // create the (project-card animate-entry)\n            var project_card = document.createElement('div');\n            // class name\n            project_card.className = 'project-card animate-entry';\n            //  create figure element\n            var img_figure = document.createElement('figure');\n            // create img, append src, create alt.\n            var project_poster = document.createElement('img');\n            project_poster.src = projectCoverUrl;\n            project_poster.alt = `photo of ${projectTitle}`\n            // put image in figure element\n            img_figure.appendChild(project_poster);\n\n\n            // create a section, project-details\n            var project_details = document.createElement('section');\n            project_details.className = \"project-details\";\n            // create div, min-details.\n            var minimized_details = document.createElement('div');\n            minimized_details.className = \"min-details\"\n            // create h1 block for project name, span for language.\n            var project_title = document.createElement('h1');\n            var title = document.createTextNode(projectTitle);\n            project_title.appendChild(title);\n\n            var project_language = document.createElement('span');\n            var lang = document.createTextNode(projectLangs);\n            project_language.appendChild(lang);\n\n            project_title.appendChild(project_language);\n\n            minimized_details.appendChild(project_title);\n            // create a tag class btn , with target _blank and rel noopener noreferrer \n            var learn_more = document.createElement('a');\n            learn_more.className = \"btn\";\n            // text is learn more.\n            var learn_more_prompt = document.createTextNode(\"Learn More\");\n            learn_more.href = projectExtraInfoLink;\n            learn_more.target = \"_blank\";\n            learn_more.rel = \"noopener noreferrer\"\n\n            learn_more.appendChild(learn_more_prompt);\n            project_details.appendChild(minimized_details);\n            project_details.appendChild(learn_more);\n\n\n\n            // put everything in project card.\n            project_card.appendChild(img_figure);\n            project_card.appendChild(project_details);\n\n            // add to carousel\n            this.projects_carousel.appendChild(project_card);\n        }\n    }\n\n    scrollTowardsLeft() {\n        // add width of the card + one of the margins.\n        var project_card = document.querySelector(\".project-card\");\n        var style = project_card.currentStyle || window.getComputedStyle(project_card);\n\n        var scrollPerClick = project_card.clientWidth + parseFloat(style.marginRight) + parseFloat(style.marginLeft);\n\n        this.projects_carousel.scrollTo({\n            top: 0,\n            left: (this.scrollAmount -= scrollPerClick),\n            behavior: \"smooth\"\n        });\n\n        if (this.scrollAmount < 0) scrollAmount = 0;\n    }\n\n    scrollTowardsRight() {\n        var project_card = document.querySelector(\".project-card\");\n        var style = project_card.currentStyle || window.getComputedStyle(project_card);\n\n        // add width of the card + one of the margins.\n        var scrollPerClick = project_card.clientWidth + parseFloat(style.marginRight) + parseFloat(style.marginLeft);\n\n        if (this.scrollAmount <= this.projects_carousel.scrollWidth - this.projects_carousel.clientWidth) {\n            this.projects_carousel.scrollTo({\n                top: 0,\n                left: (this.scrollAmount += scrollPerClick),\n                behavior: \"smooth\"\n            })\n        }\n    }\n\n\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { ProjectListView } from \"./view/projects/projects-list-view.js\";\nimport { ProjectListController } from \"./controller/projects-list-controller.js\";\nimport { ProjectListModel } from \"./model/project-list-model.js\";\n\nconst app = new ProjectListController(new ProjectListModel(), new ProjectListView());"],"names":[],"sourceRoot":""}