{"version":3,"file":"contact.js","mappings":";;;;;;;;;;;;;;AAAO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA,SAAS;AACT;AACA,SAAS;;AAET;;AAEA;;;;;;;;;;;;;;ACzBO;AACP;AACA;;AAEA;;;AAGA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iCAAiC,uBAAuB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,+DAA+D,OAAO;AACtE;AACA,yBAAyB;AACzB;AACA,uDAAuD,IAAI;AAC3D,yBAAyB;AACzB,iBAAiB;AACjB;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA,qBAAqB,aAAa,QAAQ,wBAAwB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,+DAA+D,OAAO;AACtE;AACA,yBAAyB;AACzB,uDAAuD,IAAI;AAC3D,yBAAyB;AACzB,iBAAiB;AACjB,SAAS;AACT;;;AAGA;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA,qBAAqB,aAAa,GAAG,GAAG,GAAG,oBAAoB,IAAI,uBAAuB;AAC1F;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,2DAA2D,OAAO;AAClE;AACA,qBAAqB;AACrB;AACA,qBAAqB;;AAErB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,oCAAoC;AACvE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,2DAA2D,OAAO;AAClE;AACA,qBAAqB;AACrB,wDAAwD,IAAI;AAC5D;AACA,qBAAqB;AACrB,aAAa;AACb,gDAAgD,IAAI;AACpD;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA,eAAe,wBAAwB;AACvC,eAAe,mCAAmC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,2DAA2D,OAAO;AAClE;AACA,qBAAqB;AACrB,wDAAwD,IAAI;AAC5D;AACA,qBAAqB;AACrB,aAAa;AACb,gDAAgD,IAAI;AACpD;AACA,aAAa;AACb,SAAS;;AAET;;;AAGA;;AAEA;AACA;AACA,eAAe,+BAA+B;AAC9C,eAAe,sCAAsC;AACrD;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA,qBAAqB,aAAa,GAAG,eAAe;AACpD;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,2DAA2D,OAAO;AAClE;AACA,qBAAqB;AACrB,wDAAwD,IAAI;AAC5D;AACA,qBAAqB;AACrB,aAAa;AACb,gDAAgD,IAAI;AACpD;AACA,aAAa;AACb,SAAS;;AAET;;AAEA;AACA;AACA,eAAe,kCAAkC;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,oCAAoC;AACvE;AACA;AACA;;;AAGA;AACA,qBAAqB,aAAa,GAAG,eAAe;AACpD;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,4DAA4D,SAAS;AACrE,2DAA2D,OAAO;AAClE;AACA,qBAAqB;AACrB,wDAAwD,IAAI;AAC5D;AACA,qBAAqB;AACrB,aAAa;AACb,gDAAgD,IAAI;AACpD;AACA,aAAa;AACb,SAAS;;AAET;;AAEA;AACA;AACA,eAAe,8BAA8B;AAC7C;AACA;AACA;AACA;AACA,qBAAqB,aAAa,cAAc,GAAG;AACnD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,2DAA2D,OAAO;AAClE;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB,aAAa;AACb;AACA,aAAa;AACb,SAAS;;AAET;;AAEA;AACA;AACA,eAAe,0BAA0B;AACzC;AACA;AACA;AACA;AACA,qBAAqB,aAAa,GAAG,GAAG;AACxC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,2DAA2D,OAAO;AAClE;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB,aAAa;AACb;AACA,aAAa;AACb,SAAS;;AAET;;AAEA;;AAEA;AACA;;;;;;;;;;;;;;;ACrT4C;;AAErC;;AAEP;AACA,6BAA6B,qDAAS;AACtC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;ACjDmE;;AAE5D,iCAAiC,4EAAc;AACtD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACVO;AACP;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA;;;;;;UC1BA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACNoF;AACP;AACR;;;;AAIrE,gBAAgB,8FAAuB,KAAK,+EAAkB,QAAQ,uFAAiB,I","sources":["webpack://ngacho-new/./app/controller/view-contact-me-controller.js","webpack://ngacho-new/./app/model/base-models/base-model.js","webpack://ngacho-new/./app/model/base-models/contact-me-model.js","webpack://ngacho-new/./app/model/view-contact-me-model.js","webpack://ngacho-new/./app/view/contact-me/view-contact-me-view.js","webpack://ngacho-new/webpack/bootstrap","webpack://ngacho-new/webpack/runtime/define property getters","webpack://ngacho-new/webpack/runtime/hasOwnProperty shorthand","webpack://ngacho-new/webpack/runtime/make namespace object","webpack://ngacho-new/./app/view-contact-me-app.js"],"sourcesContent":["export class ViewContactMeController{\n\n    constructor(model, view){\n        this.model = model;\n        this.view = view;\n\n        this.init()\n    }\n\n    init() {\n     \n        this.fetchContactMeText();\n    }\n\n\n    fetchContactMeText() {\n\n        this.model.fetchContactMeFromDb().then((contactMe) =>{\n            this.view.setUpContactMe(contactMe);\n        }).catch((errMessage)=>{\n            console.error(errMessage);\n        });\n\n    }\n\n}","export class BaseModel{\n    constructor(baseUrl){\n        this.baseUrl = baseUrl;\n\n    }\n\n\n    /**\n     * \n     * @returns {Promise with array of objects}\n     */\n    async getList(){\n        return new Promise((resolve, reject) => {\n            fetch(this.baseUrl, {credentials: 'include'})\n                .then(response => {\n                    // Process the response body and status code simultaneously\n                    Promise.all([response.json(), response.status])\n                        .then(([data, status]) => {\n                            if (status === 200) {\n                                resolve(data);\n                            } else {\n                                console.log(err);\n                                reject(`Failed with response ${status}`)\n                            }\n                        }).catch((err) => {\n                            console.log(err);\n                            reject(`Failed response: ${err}`);\n                        });\n                }).catch((err) => {\n                    console.log(err);\n                    reject(\"Failed to fetch\")\n            });\n        });\n    }\n\n    /**\n     * \n     * @param {a tag in series} tag \n     * @returns promise of array of objects\n     */\n    async getListByTag(tag){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/tags/${encodeURIComponent(tag)}`)\n                .then(response => {\n                    // Process the response body and status code simultaneously\n                    Promise.all([response.json(), response.status])\n                        .then(([data, status]) => {\n                            if (status === 200) {\n                                resolve(data);\n                            } else {\n                                reject(`Failed with response ${status}`)\n                            }\n                        }).catch((err) => {\n                            reject(`Failed response: ${err}`);\n                        });\n                }).catch((err) => reject(\"Failed to fetch\"));\n        });\n    }\n\n\n    /**\n     * \n     * @param {object id} id \n     * @returns promise of single object\n     */\n    async getListItemById(id, serverSideRendering){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${id}/${serverSideRendering}`, {credentials: 'include'}).then((response) => {\n                Promise.all([response.json(), response.status])\n                    .then(([data, status]) => {\n                        if (status === 200) {\n                            resolve(data);\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        reject(\"Failed response\")\n                    });\n\n            }).catch(() => reject(\"Failed to fetch id\"))\n        });\n    }\n\n    /**\n     * \n     * @param {item we want to create} contents \n     * @returns status of item creation\n     */\n    async createItem(contents){\n        const payload = {\n            doc: contents\n        }\n\n        const requestOptions = {\n            method: 'POST',\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n            credentials: 'include',\n            body: JSON.stringify(payload)\n        };\n\n        return new Promise((resolve, reject) => {\n            fetch(this.baseUrl, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`);\n                reject(\"Failed response.\")\n            });\n        });\n    }\n\n    /**\n     * \n     * @param {file we want to upload} file \n     * @param {any data associated with the file} itemObject \n     * @returns \n     */\n    async createFileItem(file, itemObject){\n        \n        const formData = new FormData();\n        formData.append('file', file);\n        formData.append('doc', JSON.stringify(itemObject));\n\n\n        const requestOptions = {\n            method: 'POST',\n            credentials: 'include',\n            body: formData\n        }\n\n\n        return new Promise((resolve, reject) => {\n            fetch(this.baseUrl, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`);\n                reject(\"Failed response.\")\n            });\n        });\n\n        \n\n\n    }\n\n    /**\n     * \n     * @param {file object we want to update} file \n     * @param {data object for metadata of the file} contents \n     * @returns the status of the update\n     */\n    async updateFileItemObject(file, contents){\n        const formData = new FormData();\n        formData.append('file', file);\n        formData.append('doc', JSON.stringify(contents));\n\n\n        const requestOptions = {\n            method: 'PUT',\n            body: formData,\n            credentials: 'include'\n        }\n\n\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${contents['id']}`, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`);\n                reject(\"Failed response.\")\n            });\n        });\n\n    }\n\n    /**\n     * \n     * @param {data object of item to be update} contents \n     * @returns status of updated item\n     */\n    async updateItem(contents){\n        const payload = {\n            doc: contents\n        }\n\n        const requestOptions = {\n            method: 'PUT',\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n            credentials: 'include',\n            body: JSON.stringify(payload)\n        }\n\n\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${contents['id']}`, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([response, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            console.error(`ERROR LEVEL 2: ${response}`);\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`)\n                reject(\"Failed response.\")\n            });\n        });\n\n    }\n\n    /**\n     * used for activating and deactivating items\n     * @param {id of item we want to update} id \n     * @returns status of update\n     */\n    async updateItemStatus(id){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/set-active/${id}`, {\n                method: 'PUT',\n                credentials: 'include'\n            }).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.json(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        reject(\"Failed response\");\n                    });\n            }).catch((_) => {\n                reject(\"Failed\");\n            });\n        });\n\n    }\n\n    /**\n     * \n     * @param {id of item to be deleted} id \n     * @returns \n     */\n    async deleteItem(id){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${id}`, {\n                method: 'DELETE',\n                credentials: 'include'\n            }).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([data, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        reject(\"Failed response\");\n                    });\n            }).catch((_) => {\n                reject(\"Failed to delete text\")\n            });\n        });\n\n    }\n\n    \n\n    \n}","import { BaseModel } from \"./base-model.js\";\n\nexport class ContactMeModel {\n\n    constructor() {\n        this.baseModel = new BaseModel('https://api.ngacho.com/database/contact-me-texts');\n    }\n\n    async fetchContactMeList() {\n        return this.baseModel.getList();\n    }\n\n    async fetchActiveContactMe() {\n        let contactMeList = await this.baseModel.getList();\n        return new Promise((resolve, reject) => {\n            let activeContactMeList = contactMeList.filter(contactMe => contactMe.active === true);\n            if (activeContactMeList.length > 0) {\n                resolve(activeContactMeList[0]);\n            } else {\n                reject(\"No active contact me found\");\n            }\n        });\n\n    }\n\n    async fetchContactMe(contactMeId, serverSideRendering = false) {\n        return this.baseModel.getListItemById(contactMeId, serverSideRendering);\n    }\n\n\n    async updateContactMeStatus(contactMeId) {\n        return this.baseModel.updateItemStatus(contactMeId);\n    }\n\n    async deleteContactMeText(contactMeId) {\n        return this.baseModel.deleteItem(contactMeId);\n    }\n\n\n    async updateContactMeText(contactMeContents){\n        return this.baseModel.updateItem(contactMeContents);\n    }\n\n\n\n    async postContactMeText(contactMeContents) {\n        return this.baseModel.createItem(contactMeContents);\n\n    }\n}","import { ContactMeModel } from \"./base-models/contact-me-model.js\";\n\nexport class ViewContactMeModel extends ContactMeModel{\n    constructor(){\n        super();\n    }\n\n    async fetchContactMeFromDb(){\n        var blogData = await this.fetchActiveContactMe();\n        return blogData;\n    }\n}","\nexport class ViewContactMeView{\n    constructor(){\n        this.contact_me_content = document.querySelector(\".contact-me-intro\");\n    }\n\n\n    setUpContactMe(contactMeContents) {\n        var heading_element = document.createElement('h1');\n        heading_element.className = \"open-invite animate-entry\";\n        var heading = document.createTextNode(contactMeContents[\"title\"]);\n        heading_element.appendChild(heading);\n        this.contact_me_content.append(heading_element);\n\n\n        var contact_me_element = document.createElement('p');\n        contact_me_element.className = \"contact-me-text animate-entry\";\n        \n\n        // html string\n        contact_me_element.innerHTML = contactMeContents[\"html\"];\n        this.contact_me_content.append(contact_me_element);\n\n    }\n\n\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { ViewContactMeController } from \"./controller/view-contact-me-controller.js\"\nimport { ViewContactMeView } from \"./view/contact-me/view-contact-me-view.js\"\nimport { ViewContactMeModel } from \"./model/view-contact-me-model.js\"\n\n\n\nconst app = new ViewContactMeController(new ViewContactMeModel(), new ViewContactMeView());"],"names":[],"sourceRoot":""}