{"version":3,"file":"blogPost.js","mappings":"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","sources":["webpack://ngacho-new/./app/controller/blog-post-controller.js","webpack://ngacho-new/./app/model/base-models/base-model.js","webpack://ngacho-new/./app/model/base-models/blog-model.js","webpack://ngacho-new/./app/model/blog-post-model.js","webpack://ngacho-new/./app/view/blog/blog-post-view.js","webpack://ngacho-new/webpack/bootstrap","webpack://ngacho-new/webpack/runtime/define property getters","webpack://ngacho-new/webpack/runtime/hasOwnProperty shorthand","webpack://ngacho-new/webpack/runtime/make namespace object","webpack://ngacho-new/./app/blog-post-app.js"],"sourcesContent":["export class BlogPostController {\n    constructor(blogPostModel, blogPostView) {\n        this.model = blogPostModel;\n        this.view = blogPostView;\n        this.blogId = '';\n\n        this.init();\n    }\n\n\n    init() {\n        let path_extension = decodeURI(location.search);\n        this.blogId = path_extension.slice(1);\n\n        if (this.blogId) {\n            this.fetchBlog(this.blogId);\n        }\n\n    }\n\n    fetchBlog(id) {\n\n        this.model.fetchBlogFromDb(id).then(\n            (blog) => {\n                this.viewSetUpBlog(blog)\n            }\n        ).catch((errMessage) =>\n            console.log(errMessage)\n        );\n\n    }\n\n    viewSetUpBlog(data) {\n        this.view.setUpBlog(data);\n    }\n}","export class BaseModel{\n    constructor(baseUrl){\n        this.baseUrl = baseUrl;\n\n    }\n\n\n    /**\n     * \n     * @returns {Promise with array of objects}\n     */\n    async getList(){\n        return new Promise((resolve, reject) => {\n            fetch(this.baseUrl, {credentials: 'include'})\n                .then(response => {\n                    // Process the response body and status code simultaneously\n                    Promise.all([response.json(), response.status])\n                        .then(([data, status]) => {\n                            if (status === 200) {\n                                resolve(data);\n                            } else {\n                                console.log(err);\n                                reject(`Failed with response ${status}`)\n                            }\n                        }).catch((err) => {\n                            console.log(err);\n                            reject(`Failed response: ${err}`);\n                        });\n                }).catch((err) => {\n                    console.log(err);\n                    reject(\"Failed to fetch\")\n            });\n        });\n    }\n\n    /**\n     * \n     * @param {a tag in series} tag \n     * @returns promise of array of objects\n     */\n    async getListByTag(tag){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/tags/${encodeURIComponent(tag)}`)\n                .then(response => {\n                    // Process the response body and status code simultaneously\n                    Promise.all([response.json(), response.status])\n                        .then(([data, status]) => {\n                            if (status === 200) {\n                                resolve(data);\n                            } else {\n                                reject(`Failed with response ${status}`)\n                            }\n                        }).catch((err) => {\n                            reject(`Failed response: ${err}`);\n                        });\n                }).catch((err) => reject(\"Failed to fetch\"));\n        });\n    }\n\n\n    /**\n     * \n     * @param {object id} id \n     * @returns promise of single object\n     */\n    async getListItemById(id, serverSideRendering){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${id}/${serverSideRendering}`, {credentials: 'include'}).then((response) => {\n                Promise.all([response.json(), response.status])\n                    .then(([data, status]) => {\n                        if (status === 200) {\n                            resolve(data);\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        reject(\"Failed response\")\n                    });\n\n            }).catch(() => reject(\"Failed to fetch id\"))\n        });\n    }\n\n    /**\n     * \n     * @param {item we want to create} contents \n     * @returns status of item creation\n     */\n    async createItem(contents){\n        const payload = {\n            doc: contents\n        }\n\n        const requestOptions = {\n            method: 'POST',\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n            credentials: 'include',\n            body: JSON.stringify(payload)\n        };\n\n        return new Promise((resolve, reject) => {\n            fetch(this.baseUrl, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`);\n                reject(\"Failed response.\")\n            });\n        });\n    }\n\n    /**\n     * \n     * @param {file we want to upload} file \n     * @param {any data associated with the file} itemObject \n     * @returns \n     */\n    async createFileItem(file, itemObject){\n        \n        const formData = new FormData();\n        formData.append('file', file);\n        formData.append('doc', JSON.stringify(itemObject));\n\n\n        const requestOptions = {\n            method: 'POST',\n            credentials: 'include',\n            body: formData\n        }\n\n\n        return new Promise((resolve, reject) => {\n            fetch(this.baseUrl, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`);\n                reject(\"Failed response.\")\n            });\n        });\n\n        \n\n\n    }\n\n    /**\n     * \n     * @param {file object we want to update} file \n     * @param {data object for metadata of the file} contents \n     * @returns the status of the update\n     */\n    async updateFileItemObject(file, contents){\n        const formData = new FormData();\n        formData.append('file', file);\n        formData.append('doc', JSON.stringify(contents));\n\n\n        const requestOptions = {\n            method: 'PUT',\n            body: formData,\n            credentials: 'include'\n        }\n\n\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${contents['id']}`, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`);\n                reject(\"Failed response.\")\n            });\n        });\n\n    }\n\n    /**\n     * \n     * @param {data object of item to be update} contents \n     * @returns status of updated item\n     */\n    async updateItem(contents){\n        const payload = {\n            doc: contents\n        }\n\n        const requestOptions = {\n            method: 'PUT',\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n            credentials: 'include',\n            body: JSON.stringify(payload)\n        }\n\n\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${contents['id']}`, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([response, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            console.error(`ERROR LEVEL 2: ${response}`);\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`)\n                reject(\"Failed response.\")\n            });\n        });\n\n    }\n\n    /**\n     * used for activating and deactivating items\n     * @param {id of item we want to update} id \n     * @returns status of update\n     */\n    async updateItemStatus(id){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/set-active/${id}`, {\n                method: 'PUT',\n                credentials: 'include'\n            }).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.json(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        reject(\"Failed response\");\n                    });\n            }).catch((_) => {\n                reject(\"Failed\");\n            });\n        });\n\n    }\n\n    /**\n     * \n     * @param {id of item to be deleted} id \n     * @returns \n     */\n    async deleteItem(id){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${id}`, {\n                method: 'DELETE',\n                credentials: 'include'\n            }).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([data, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        reject(\"Failed response\");\n                    });\n            }).catch((_) => {\n                reject(\"Failed to delete text\")\n            });\n        });\n\n    }\n\n    \n\n    \n}","import { BaseModel } from \"./base-model.js\";\n\nexport class BlogModel {\n\n    /**\n     * getBlogs\n     * deleteBlogById\n     * editBlog\n     * addBlog\n     */\n    constructor() {\n        this.baseModel = new BaseModel(\"https://api.ngacho.com/database/blogs\");\n    }\n\n    // pass me a new blog. I'll modify the id\n    async addBlog(blog) {\n        return this.baseModel.createItem(blog);\n    }\n\n    // pass me an edited blog, it should have a blog id.\n    async editBlog(editedBlog) {\n        return this.baseModel.updateItem(editedBlog);\n    }\n\n    async getBlogs() {\n        return this.baseModel.getList();\n    }\n\n    // singular blog raw vs ssr\n    async getBlog(blogId, serverSideRendering = false) {\n        return this.baseModel.getListItemById(blogId, serverSideRendering);\n    }\n\n    async deleteBlogById(blogId) {\n        return this.baseModel.deleteItem(blogId);\n    }\n\n    // filter blog by tags.\n    async getBlogsByTags(tag) {\n        return this.baseModel.getListByTag(tag);\n    }\n\n}\n","import { BlogModel } from \"./base-models/blog-model.js\";\n\nexport class BlogPostModel extends BlogModel {\n    constructor(){\n        super();\n    }\n\n    async fetchBlogFromDb(id){\n        var blogData = await this.getBlog(id, true);\n        return blogData;\n    }\n\n}\n\n","export class BlogPostView {\n    constructor() {\n        this.blog_heading_container = document.querySelector(\".blog-heading-wrapper\");\n        this.blog_content_container = document.querySelector(\".blog-content\");\n\n    }\n\n\n    setUpBlog(data) {\n        var heading_element = document.createElement('h1');\n        heading_element.className = \"blog-heading\";\n        var heading = document.createTextNode(data[\"title\"]);\n        document.title = data['title'];\n        heading_element.appendChild(heading);\n        this.blog_heading_container.appendChild(heading_element);\n\n\n        var time_element = document.createElement('time');\n        var time = document.createTextNode(data[\"publishedAt\"]);\n        time_element.appendChild(time);\n        this.blog_content_container.appendChild(time_element);\n\n        var descript = data[\"descript\"];\n        if (descript) {\n            var blockQuote_element = document.createElement('blockquote');\n            blockQuote_element.className = \"post-description\";\n            var blockQuote = document.createTextNode(descript);\n            blockQuote_element.appendChild(blockQuote);\n            this.blog_content_container.appendChild(blockQuote_element);\n        }\n\n        var article_element = document.createElement('article');\n        article_element.className = \"blog-post\";\n\n        // html string\n        article_element.innerHTML = data['html'];\n        this.blog_content_container.appendChild(article_element);\n    }\n\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { BlogPostView } from \"./view/blog/blog-post-view.js\";\nimport { BlogPostModel } from \"./model/blog-post-model.js\";\nimport { BlogPostController } from \"./controller/blog-post-controller.js\";\n\nconst app = new BlogPostController(new BlogPostModel(), new BlogPostView());"],"names":["BlogPostController","constructor","blogPostModel","blogPostView","this","model","view","blogId","init","path_extension","decodeURI","location","search","slice","fetchBlog","id","fetchBlogFromDb","then","blog","viewSetUpBlog","catch","errMessage","console","log","data","setUpBlog","BaseModel","baseUrl","async","Promise","resolve","reject","fetch","credentials","response","all","json","status","err","tag","encodeURIComponent","serverSideRendering","contents","payload","doc","requestOptions","method","headers","Headers","body","JSON","stringify","text","_","error","file","itemObject","formData","FormData","append","BlogModel","baseModel","createItem","editedBlog","updateItem","getList","getListItemById","deleteItem","getListByTag","BlogPostModel","super","getBlog","BlogPostView","blog_heading_container","document","querySelector","blog_content_container","heading_element","createElement","className","heading","createTextNode","title","appendChild","time_element","time","descript","blockQuote_element","blockQuote","article_element","innerHTML","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value"],"sourceRoot":""}