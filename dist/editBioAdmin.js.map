{"version":3,"file":"editBioAdmin.js","mappings":"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","sources":["webpack://ngacho-new/./app/controller/edit-bio-controller.js","webpack://ngacho-new/./app/model/base-models/base-model.js","webpack://ngacho-new/./app/model/base-models/bio-model.js","webpack://ngacho-new/./app/model/edit-bio-model.js","webpack://ngacho-new/./app/view/bio/admin/edit-bio-view.js","webpack://ngacho-new/webpack/bootstrap","webpack://ngacho-new/webpack/runtime/define property getters","webpack://ngacho-new/webpack/runtime/hasOwnProperty shorthand","webpack://ngacho-new/webpack/runtime/make namespace object","webpack://ngacho-new/./app/edit-bio-app.js"],"sourcesContent":["export class EditBioController {\n    constructor(model, view) {\n        this.model = model;\n        this.view = view;\n        this.bioId = '';\n\n        this.init();\n    }\n\n    init() {\n        let path_extension = decodeURI(location.search);\n        this.bioId = path_extension.slice(1);\n\n        if (this.bioId) {\n            this.fetchBio(this.bioId);\n            this.view.bindHandlePublishBio(this.handlePublishUpdatedBio);\n        } else {\n            this.view.bindHandlePublishBio(this.handlePublishNewBio);\n        }\n\n\n\n    }\n\n\n\n    handlePublishNewBio = async (file, bioObject) => this.model.uploadNewBio(file, bioObject);\n    handlePublishUpdatedBio = async (file, bioObject) => {\n        return file ? this.model.uploadUpdatedBioWithFile(file, bioObject) : this.model.uploadUpdatedBioObjectWithoutFile(bioObject);\n    }\n    fetchBio(id) {\n        this.model.fetchBioFromDb(id).then(\n            (bio) => this.view.setUpBio(bio)\n        ).catch((errMessage) =>\n            console.log(errMessage)\n        );\n\n    }\n}\n","export class BaseModel{\n    constructor(baseUrl){\n        this.baseUrl = baseUrl;\n\n    }\n\n\n    /**\n     * \n     * @returns {Promise with array of objects}\n     */\n    async getList(){\n        return new Promise((resolve, reject) => {\n            fetch(this.baseUrl, {credentials: 'include'})\n                .then(response => {\n                    // Process the response body and status code simultaneously\n                    Promise.all([response.json(), response.status])\n                        .then(([data, status]) => {\n                            if (status === 200) {\n                                resolve(data);\n                            } else {\n                                console.log(err);\n                                reject(`Failed with response ${status}`)\n                            }\n                        }).catch((err) => {\n                            console.log(err);\n                            reject(`Failed response: ${err}`);\n                        });\n                }).catch((err) => {\n                    console.log(err);\n                    reject(\"Failed to fetch\")\n            });\n        });\n    }\n\n    /**\n     * \n     * @param {a tag in series} tag \n     * @returns promise of array of objects\n     */\n    async getListByTag(tag){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/tags/${encodeURIComponent(tag)}`)\n                .then(response => {\n                    // Process the response body and status code simultaneously\n                    Promise.all([response.json(), response.status])\n                        .then(([data, status]) => {\n                            if (status === 200) {\n                                resolve(data);\n                            } else {\n                                reject(`Failed with response ${status}`)\n                            }\n                        }).catch((err) => {\n                            reject(`Failed response: ${err}`);\n                        });\n                }).catch((err) => reject(\"Failed to fetch\"));\n        });\n    }\n\n\n    /**\n     * \n     * @param {object id} id \n     * @returns promise of single object\n     */\n    async getListItemById(id, serverSideRendering){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${id}/${serverSideRendering}`, {credentials: 'include'}).then((response) => {\n                Promise.all([response.json(), response.status])\n                    .then(([data, status]) => {\n                        if (status === 200) {\n                            resolve(data);\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        reject(\"Failed response\")\n                    });\n\n            }).catch(() => reject(\"Failed to fetch id\"))\n        });\n    }\n\n    /**\n     * \n     * @param {item we want to create} contents \n     * @returns status of item creation\n     */\n    async createItem(contents){\n        const payload = {\n            doc: contents\n        }\n\n        const requestOptions = {\n            method: 'POST',\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n            credentials: 'include',\n            body: JSON.stringify(payload)\n        };\n\n        return new Promise((resolve, reject) => {\n            fetch(this.baseUrl, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`);\n                reject(\"Failed response.\")\n            });\n        });\n    }\n\n    /**\n     * \n     * @param {file we want to upload} file \n     * @param {any data associated with the file} itemObject \n     * @returns \n     */\n    async createFileItem(file, itemObject){\n        \n        const formData = new FormData();\n        formData.append('file', file);\n        formData.append('doc', JSON.stringify(itemObject));\n\n\n        const requestOptions = {\n            method: 'POST',\n            credentials: 'include',\n            body: formData\n        }\n\n\n        return new Promise((resolve, reject) => {\n            fetch(this.baseUrl, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`);\n                reject(\"Failed response.\")\n            });\n        });\n\n        \n\n\n    }\n\n    /**\n     * \n     * @param {file object we want to update} file \n     * @param {data object for metadata of the file} contents \n     * @returns the status of the update\n     */\n    async updateFileItemObject(file, contents){\n        const formData = new FormData();\n        formData.append('file', file);\n        formData.append('doc', JSON.stringify(contents));\n\n\n        const requestOptions = {\n            method: 'PUT',\n            body: formData,\n            credentials: 'include'\n        }\n\n\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${contents['id']}`, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`);\n                reject(\"Failed response.\")\n            });\n        });\n\n    }\n\n    /**\n     * \n     * @param {data object of item to be update} contents \n     * @returns status of updated item\n     */\n    async updateItem(contents){\n        const payload = {\n            doc: contents\n        }\n\n        const requestOptions = {\n            method: 'PUT',\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n            credentials: 'include',\n            body: JSON.stringify(payload)\n        }\n\n\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${contents['id']}`, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([response, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            console.error(`ERROR LEVEL 2: ${response}`);\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`)\n                reject(\"Failed response.\")\n            });\n        });\n\n    }\n\n    /**\n     * used for activating and deactivating items\n     * @param {id of item we want to update} id \n     * @returns status of update\n     */\n    async updateItemStatus(id){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/set-active/${id}`, {\n                method: 'PUT',\n                credentials: 'include'\n            }).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.json(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        reject(\"Failed response\");\n                    });\n            }).catch((_) => {\n                reject(\"Failed\");\n            });\n        });\n\n    }\n\n    /**\n     * \n     * @param {id of item to be deleted} id \n     * @returns \n     */\n    async deleteItem(id){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${id}`, {\n                method: 'DELETE',\n                credentials: 'include'\n            }).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([data, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        reject(\"Failed response\");\n                    });\n            }).catch((_) => {\n                reject(\"Failed to delete text\")\n            });\n        });\n\n    }\n\n    \n\n    \n}","import { BaseModel } from \"./base-model.js\";\n\nexport class BioModel{\n    constructor(){\n        this.baseModel = new BaseModel(\"https://api.ngacho.com/database/bios\");\n        \n    }\n\n\n    async fetchBios(){\n        return this.baseModel.getList();\n    }\n\n    async fetchBioById(id){\n        return this.baseModel.getListItemById(id);\n    }\n\n    async purgeBio(bioId){\n        return this.baseModel.deleteItem(bioId);\n    }\n\n    async updateBioStatus(bioId) {\n        return this.baseModel.updateItemStatus(bioId);\n    }\n\n    async updateBioWithFile(file, bioObject){\n        return this.baseModel.updateFileItemObject(file, bioObject);\n    }\n\n    async updateBio(bioObject){\n        return this.baseModel.updateItem(bioObject);\n    }\n\n    async publishBio(file, bioObject){\n        return this.baseModel.createFileItem(file, bioObject);\n    }\n\n\n\n\n}","import { BioModel } from \"./base-models/bio-model.js\";\n\nexport class EditBioModel extends BioModel {\n\n    constructor(){\n        super();\n    }\n\n\n    async uploadNewBio(file, bioObject){\n        let uploadRef = await this.publishBio(file, bioObject);\n        return uploadRef;\n    }\n\n    async fetchBioFromDb(id){\n        let fetchRef = await this.fetchBioById(id);\n        return fetchRef;\n    }\n\n    async uploadUpdatedBioWithFile(file, bioObject){\n        let updateRef = await this.updateBioWithFile(file, bioObject);\n        return updateRef;\n\n    }\n\n    async uploadUpdatedBioObjectWithoutFile(bioObject){\n        let updateRef = await this.updateBio(bioObject);\n        return updateRef;\n    }\n    \n}","export class EditBioView {\n\n    constructor() {\n\n        this.add_projects_wrapper = document.querySelector(\".add-bio-wrapper\");\n        this.projectForm = document.querySelector(\".bio-details-form\");\n\n        this.uploadImageInput = document.getElementById(\"image-upload-input\");\n        this.bioTitleInput = document.getElementById(\"bio-title-input\");\n        this.bioTextInput = document.getElementById(\"bio-text-input\");\n        \n\n        this.postBioButton = document.getElementById(\"post-bio-button\");\n        // this.resetForm();\n        this.validate();\n\n        this.bioTitleInput.addEventListener(\"input\", ()=>{\n            this.validate();\n        })\n\n        this.bioTextInput.addEventListener(\"input\", ()=>{\n            this.validate();\n        })\n        \n    }\n\n    validate(){\n        if(\n            this.bioTitleInput.value.length != 0 &&\n            this.bioTextInput.value.length != 0\n            ){\n            this.postBioButton.disabled = false;\n        }else{\n            this.postBioButton.disabled = true;\n        }\n    }\n\n\n    bindHandlePublishBio(handler) {\n        let imageInput = this.uploadImageInput;\n        let bioCoverFile = null;\n\n        imageInput.addEventListener(\"change\", () => {\n            if (imageInput.files && imageInput.files[0]) {\n                var reader = new FileReader();\n\n                reader.onload = function (e) {\n                    var bio_cover = document.getElementById('bio-cover');\n                    bio_cover.setAttribute('src', e.target.result);\n\n                };\n\n                bioCoverFile = imageInput.files[0];\n                reader.readAsDataURL(bioCoverFile);\n            }\n        });\n\n        this.postBioButton.addEventListener(\"click\", ()=>{\n            \n            let objId = decodeURI(location.search).slice(1);\n\n            let bioObject = objId ?{\n                id : objId,\n                \"title\" : this.bioTitleInput.value,\n                \"text\" : this.bioTextInput.value,\n                active : false\n            } : {\n                \"title\" : this.bioTitleInput.value,\n                \"text\" : this.bioTextInput.value,\n                active : false\n            }\n            \n            \n    \n            var status = handler(bioCoverFile, bioObject);\n            status.then((_)=>{\n                this.resetForm();\n            }).catch((err)=>{\n                console.log('error ' + err);\n            });\n            \n        })\n    }\n\n    setUpBio(bioData){\n\n        let bioTitle = bioData['title'];\n        let bioText = bioData['text'];\n        let publicUrl = bioData['publicUrl'];\n\n        this.bioTitleInput.value = bioTitle;\n        this.bioTextInput.value = bioText;\n\n        var project_cover = document.getElementById('bio-cover');\n        project_cover.setAttribute('src', publicUrl);\n        \n        this.validate();\n    }\n\n    resetForm(){\n        this.projectForm.submit();\n        return false;\n    }\n\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { EditBioController } from \"./controller/edit-bio-controller.js\"\nimport { EditBioModel } from \"./model/edit-bio-model.js\";\nimport { EditBioView } from \"./view/bio/admin/edit-bio-view.js\";\n\n\nconst app = new EditBioController(new EditBioModel(), new EditBioView());"],"names":["EditBioController","constructor","model","view","this","bioId","init","path_extension","decodeURI","location","search","slice","fetchBio","bindHandlePublishBio","handlePublishUpdatedBio","handlePublishNewBio","async","file","bioObject","uploadNewBio","uploadUpdatedBioWithFile","uploadUpdatedBioObjectWithoutFile","id","fetchBioFromDb","then","bio","setUpBio","catch","errMessage","console","log","BaseModel","baseUrl","Promise","resolve","reject","fetch","credentials","response","all","json","status","data","err","tag","encodeURIComponent","serverSideRendering","contents","payload","doc","requestOptions","method","headers","Headers","body","JSON","stringify","text","_","error","itemObject","formData","FormData","append","BioModel","baseModel","getList","getListItemById","deleteItem","updateItemStatus","updateFileItemObject","updateItem","createFileItem","EditBioModel","super","publishBio","fetchBioById","updateBioWithFile","updateBio","EditBioView","add_projects_wrapper","document","querySelector","projectForm","uploadImageInput","getElementById","bioTitleInput","bioTextInput","postBioButton","validate","addEventListener","value","length","disabled","handler","imageInput","bioCoverFile","files","reader","FileReader","onload","e","setAttribute","target","result","readAsDataURL","objId","active","resetForm","bioData","bioTitle","bioText","publicUrl","submit","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag"],"sourceRoot":""}