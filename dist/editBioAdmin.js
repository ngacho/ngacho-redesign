/*! For license information please see editBioAdmin.js.LICENSE.txt */
(()=>{"use strict";var e={"./app/controller/edit-bio-controller.js":(e,t,i)=>{i.r(t),i.d(t,{EditBioController:()=>s});class s{constructor(e,t){this.model=e,this.view=t,this.bioId="",this.init()}init(){let e=decodeURI(location.search);this.bioId=e.slice(1),this.bioId?(this.fetchBio(this.bioId),this.view.bindHandlePublishBio(this.handlePublishUpdatedBio)):this.view.bindHandlePublishBio(this.handlePublishNewBio)}handlePublishNewBio=async(e,t)=>this.model.uploadNewBio(e,t);handlePublishUpdatedBio=async(e,t)=>e?this.model.uploadUpdatedBioWithFile(e,t):this.model.uploadUpdatedBioObjectWithoutFile(t);fetchBio(e){this.model.fetchBioFromDb(e).then((e=>this.view.setUpBio(e))).catch((e=>console.log(e)))}}},"./app/model/base-models/base-model.js":(e,t,i)=>{i.r(t),i.d(t,{BaseModel:()=>s});class s{constructor(e){this.baseUrl=e}async getList(){return new Promise(((e,t)=>{fetch(this.baseUrl,{credentials:"include"}).then((i=>{Promise.all([i.json(),i.status]).then((([i,s])=>{200===s?e(i):(console.log(err),t(`Failed with response ${s}`))})).catch((e=>{console.log(e),t(`Failed response: ${e}`)}))})).catch((e=>{console.log(e),t("Failed to fetch")}))}))}async getListByTag(e){return new Promise(((t,i)=>{fetch(`${this.baseUrl}/tags/${encodeURIComponent(e)}`).then((e=>{Promise.all([e.json(),e.status]).then((([e,s])=>{200===s?t(e):i(`Failed with response ${s}`)})).catch((e=>{i(`Failed response: ${e}`)}))})).catch((e=>i("Failed to fetch")))}))}async getListItemById(e,t){return new Promise(((i,s)=>{fetch(`${this.baseUrl}/${e}/${t}`,{credentials:"include"}).then((e=>{Promise.all([e.json(),e.status]).then((([e,t])=>{200===t?i(e):s(`Failed with response ${t}`)})).catch((e=>{s("Failed response")}))})).catch((()=>s("Failed to fetch id")))}))}async createItem(e){const t={doc:e},i={method:"POST",headers:new Headers({"Content-Type":"application/json"}),credentials:"include",body:JSON.stringify(t)};return new Promise(((e,t)=>{fetch(this.baseUrl,i).then((i=>{Promise.all([i.text(),i.status]).then((([i,s])=>{200===s?e("Success"):t(`Failed with response ${s}`)})).catch((e=>{console.error(`ERROR LEVEL 2: ${e}`),t("Failed response")}))})).catch((e=>{console.error(`ERROR LEVEL 1: ${e}`),t("Failed response.")}))}))}async createFileItem(e,t){const i=new FormData;i.append("file",e),i.append("doc",JSON.stringify(t));const s={method:"POST",credentials:"include",body:i};return new Promise(((e,t)=>{fetch(this.baseUrl,s).then((i=>{Promise.all([i.text(),i.status]).then((([i,s])=>{200===s?e("Success"):t(`Failed with response ${s}`)})).catch((e=>{console.error(`ERROR LEVEL 2: ${e}`),t("Failed response")}))})).catch((e=>{console.error(`ERROR LEVEL 1: ${e}`),t("Failed response.")}))}))}async updateFileItemObject(e,t){const i=new FormData;i.append("file",e),i.append("doc",JSON.stringify(t));const s={method:"PUT",body:i,credentials:"include"};return new Promise(((e,i)=>{fetch(`${this.baseUrl}/${t.id}`,s).then((t=>{Promise.all([t.text(),t.status]).then((([t,s])=>{200===s?e("Success"):i(`Failed with response ${s}`)})).catch((e=>{console.error(`ERROR LEVEL 2: ${e}`),i("Failed response")}))})).catch((e=>{console.error(`ERROR LEVEL 1: ${e}`),i("Failed response.")}))}))}async updateItem(e){const t={doc:e},i={method:"PUT",headers:new Headers({"Content-Type":"application/json"}),credentials:"include",body:JSON.stringify(t)};return new Promise(((t,s)=>{fetch(`${this.baseUrl}/${e.id}`,i).then((e=>{Promise.all([e.text(),e.status]).then((([e,i])=>{200===i?t("Success"):(console.error(`ERROR LEVEL 2: ${e}`),s(`Failed with response ${i}`))})).catch((e=>{console.error(`ERROR LEVEL 2: ${e}`),s("Failed response")}))})).catch((e=>{console.error(`ERROR LEVEL 1: ${e}`),s("Failed response.")}))}))}async updateItemStatus(e){return new Promise(((t,i)=>{fetch(`${this.baseUrl}/set-active/${e}`,{method:"PUT",credentials:"include"}).then((e=>{Promise.all([e.json(),e.status]).then((([e,s])=>{200===s?t("Success"):i(`Failed with response ${s}`)})).catch((e=>{i("Failed response")}))})).catch((e=>{i("Failed")}))}))}async deleteItem(e){return new Promise(((t,i)=>{fetch(`${this.baseUrl}/${e}`,{method:"DELETE",credentials:"include"}).then((e=>{Promise.all([e.text(),e.status]).then((([e,s])=>{200===s?t("Success"):i(`Failed with response ${s}`)})).catch((e=>{i("Failed response")}))})).catch((e=>{i("Failed to delete text")}))}))}}},"./app/model/base-models/bio-model.js":(e,t,i)=>{i.r(t),i.d(t,{BioModel:()=>o});var s=i("./app/model/base-models/base-model.js");class o{constructor(){this.baseModel=new s.BaseModel("https://api.ngacho.com/database/bios")}async fetchBios(){return this.baseModel.getList()}async fetchBioById(e){return this.baseModel.getListItemById(e)}async purgeBio(e){return this.baseModel.deleteItem(e)}async updateBioStatus(e){return this.baseModel.updateItemStatus(e)}async updateBioWithFile(e,t){return this.baseModel.updateFileItemObject(e,t)}async updateBio(e){return this.baseModel.updateItem(e)}async publishBio(e,t){return this.baseModel.createFileItem(e,t)}}},"./app/model/edit-bio-model.js":(e,t,i)=>{i.r(t),i.d(t,{EditBioModel:()=>o});var s=i("./app/model/base-models/bio-model.js");class o extends s.BioModel{constructor(){super()}async uploadNewBio(e,t){return await this.publishBio(e,t)}async fetchBioFromDb(e){return await this.fetchBioById(e)}async uploadUpdatedBioWithFile(e,t){return await this.updateBioWithFile(e,t)}async uploadUpdatedBioObjectWithoutFile(e){return await this.updateBio(e)}}},"./app/view/bio/admin/edit-bio-view.js":(e,t,i)=>{i.r(t),i.d(t,{EditBioView:()=>s});class s{constructor(){this.add_projects_wrapper=document.querySelector(".add-bio-wrapper"),this.projectForm=document.querySelector(".bio-details-form"),this.uploadImageInput=document.getElementById("image-upload-input"),this.bioTitleInput=document.getElementById("bio-title-input"),this.bioTextInput=document.getElementById("bio-text-input"),this.postBioButton=document.getElementById("post-bio-button"),this.validate(),this.bioTitleInput.addEventListener("input",(()=>{this.validate()})),this.bioTextInput.addEventListener("input",(()=>{this.validate()}))}validate(){0!=this.bioTitleInput.value.length&&0!=this.bioTextInput.value.length?this.postBioButton.disabled=!1:this.postBioButton.disabled=!0}bindHandlePublishBio(e){let t=this.uploadImageInput,i=null;t.addEventListener("change",(()=>{if(t.files&&t.files[0]){var e=new FileReader;e.onload=function(e){document.getElementById("bio-cover").setAttribute("src",e.target.result)},i=t.files[0],e.readAsDataURL(i)}})),this.postBioButton.addEventListener("click",(()=>{let t=decodeURI(location.search).slice(1),s=t?{id:t,title:this.bioTitleInput.value,text:this.bioTextInput.value,active:!1}:{title:this.bioTitleInput.value,text:this.bioTextInput.value,active:!1};e(i,s).then((e=>{this.resetForm()})).catch((e=>{console.log("error "+e)}))}))}setUpBio(e){let t=e.title,i=e.text,s=e.publicUrl;this.bioTitleInput.value=t,this.bioTextInput.value=i,document.getElementById("bio-cover").setAttribute("src",s),this.validate()}resetForm(){return this.projectForm.submit(),!1}}}},t={};function i(s){var o=t[s];if(void 0!==o)return o.exports;var a=t[s]={exports:{}};return e[s](a,a.exports,i),a.exports}i.d=(e,t)=>{for(var s in t)i.o(t,s)&&!i.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var s={};(()=>{i.r(s);var e=i("./app/controller/edit-bio-controller.js"),t=i("./app/model/edit-bio-model.js"),o=i("./app/view/bio/admin/edit-bio-view.js");new e.EditBioController(new t.EditBioModel,new o.EditBioView)})()})();
//# sourceMappingURL=editBioAdmin.js.map