{"version":3,"file":"blog.js","mappings":";wHAAO,MAAMA,EAETC,YAAYC,EAAeC,GACvBC,KAAKC,MAAQH,EACbE,KAAKE,KAAOH,EAEZC,KAAKG,MACT,CAEAA,OACI,IAAIC,EAAMC,UAAUC,SAASC,QAAQC,MAAM,IACzBJ,EAAMJ,KAAKC,MAAMQ,iBAAiBL,GAAOJ,KAAKC,MAAMS,eAG1DC,MAAMC,IACdZ,KAAKa,kBAAkBD,EAAS,IACjCE,OAAOC,IACNC,QAAQC,MAAMF,EAAI,GAE1B,CAEAF,kBAAqBK,IACjBlB,KAAKE,KAAKiB,aAAaD,EAAK,sFCtB7B,MAAME,EACTvB,YAAYwB,GACRrB,KAAKqB,QAAUA,CAEnB,CAOAC,gBACI,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACzBC,MAAM1B,KAAKqB,QAAS,CAACM,YAAa,YAC7BhB,MAAKiB,IAEFL,QAAQM,IAAI,CAACD,EAASE,OAAQF,EAASG,SAClCpB,MAAK,EAAEqB,EAAMD,MACK,MAAXA,EACAP,EAAQQ,IAERhB,QAAQiB,IAAIlB,KACZU,EAAO,wBAAwBM,KACnC,IACDjB,OAAOC,IACNC,QAAQiB,IAAIlB,GACZU,EAAO,oBAAoBV,IAAM,GACnC,IACPD,OAAOC,IACNC,QAAQiB,IAAIlB,GACZU,EAAO,kBAAiB,GAC9B,GAEV,CAOAH,mBAAmBlB,GACf,OAAO,IAAImB,SAAQ,CAACC,EAASC,KACzBC,MAAM,GAAG1B,KAAKqB,gBAAgBa,mBAAmB9B,MAC5CO,MAAKiB,IAEFL,QAAQM,IAAI,CAACD,EAASE,OAAQF,EAASG,SAClCpB,MAAK,EAAEqB,EAAMD,MACK,MAAXA,EACAP,EAAQQ,GAERP,EAAO,wBAAwBM,IACnC,IACDjB,OAAOC,IACNU,EAAO,oBAAoBV,IAAM,GACnC,IACPD,OAAOC,GAAQU,EAAO,oBAAmB,GAExD,CAQAH,sBAAsBa,EAAIC,GACtB,OAAO,IAAIb,SAAQ,CAACC,EAASC,KACzBC,MAAM,GAAG1B,KAAKqB,WAAWc,KAAMC,IAAuB,CAACT,YAAa,YAAYhB,MAAMiB,IAClFL,QAAQM,IAAI,CAACD,EAASE,OAAQF,EAASG,SAClCpB,MAAK,EAAEqB,EAAMD,MACK,MAAXA,EACAP,EAAQQ,GAERP,EAAO,wBAAwBM,IACnC,IACDjB,OAAOC,IACNU,EAAO,kBAAiB,GAC1B,IAEPX,OAAM,IAAMW,EAAO,uBAAqB,GAEnD,CAOAH,iBAAiBe,GACb,MAAMC,EAAU,CACZC,IAAKF,GAGHG,EAAiB,CACnBC,OAAQ,OACRC,QAAS,IAAIC,QAAQ,CAAE,eAAgB,qBACvChB,YAAa,UACbiB,KAAMC,KAAKC,UAAUR,IAGzB,OAAO,IAAIf,SAAQ,CAACC,EAASC,KACzBC,MAAM1B,KAAKqB,QAASmB,GAAgB7B,MAAKiB,IAErCL,QAAQM,IAAI,CAACD,EAASmB,OAAQnB,EAASG,SAClCpB,MAAK,EAAEqC,EAAGjB,MACQ,MAAXA,EACAP,EAAQ,WAERC,EAAO,wBAAwBM,IACnC,IACDjB,OAAOC,IACNC,QAAQC,MAAM,kBAAkBF,KAChCU,EAAO,kBAAkB,GAC3B,IACPX,OAAOC,IACNC,QAAQC,MAAM,kBAAkBF,KAChCU,EAAO,mBAAkB,GAC3B,GAEV,CAQAH,qBAAqB2B,EAAMC,GAEvB,MAAMC,EAAW,IAAIC,SACrBD,EAASE,OAAO,OAAQJ,GACxBE,EAASE,OAAO,MAAOR,KAAKC,UAAUI,IAGtC,MAAMV,EAAiB,CACnBC,OAAQ,OACRd,YAAa,UACbiB,KAAMO,GAIV,OAAO,IAAI5B,SAAQ,CAACC,EAASC,KACzBC,MAAM1B,KAAKqB,QAASmB,GAAgB7B,MAAKiB,IAErCL,QAAQM,IAAI,CAACD,EAASmB,OAAQnB,EAASG,SAClCpB,MAAK,EAAEqC,EAAGjB,MACQ,MAAXA,EACAP,EAAQ,WAERC,EAAO,wBAAwBM,IACnC,IACDjB,OAAOC,IACNC,QAAQC,MAAM,kBAAkBF,KAChCU,EAAO,kBAAkB,GAC3B,IACPX,OAAOC,IACNC,QAAQC,MAAM,kBAAkBF,KAChCU,EAAO,mBAAkB,GAC3B,GAMV,CAQAH,2BAA2B2B,EAAMZ,GAC7B,MAAMc,EAAW,IAAIC,SACrBD,EAASE,OAAO,OAAQJ,GACxBE,EAASE,OAAO,MAAOR,KAAKC,UAAUT,IAGtC,MAAMG,EAAiB,CACnBC,OAAQ,MACRG,KAAMO,EACNxB,YAAa,WAIjB,OAAO,IAAIJ,SAAQ,CAACC,EAASC,KACzBC,MAAM,GAAG1B,KAAKqB,WAAWgB,EAAa,KAAKG,GAAgB7B,MAAKiB,IAE5DL,QAAQM,IAAI,CAACD,EAASmB,OAAQnB,EAASG,SAClCpB,MAAK,EAAEqC,EAAGjB,MACQ,MAAXA,EACAP,EAAQ,WAERC,EAAO,wBAAwBM,IACnC,IACDjB,OAAOC,IACNC,QAAQC,MAAM,kBAAkBF,KAChCU,EAAO,kBAAkB,GAC3B,IACPX,OAAOC,IACNC,QAAQC,MAAM,kBAAkBF,KAChCU,EAAO,mBAAkB,GAC3B,GAGV,CAOAH,iBAAiBe,GACb,MAAMC,EAAU,CACZC,IAAKF,GAGHG,EAAiB,CACnBC,OAAQ,MACRC,QAAS,IAAIC,QAAQ,CAAE,eAAgB,qBACvChB,YAAa,UACbiB,KAAMC,KAAKC,UAAUR,IAIzB,OAAO,IAAIf,SAAQ,CAACC,EAASC,KACzBC,MAAM,GAAG1B,KAAKqB,WAAWgB,EAAa,KAAKG,GAAgB7B,MAAKiB,IAE5DL,QAAQM,IAAI,CAACD,EAASmB,OAAQnB,EAASG,SAClCpB,MAAK,EAAEiB,EAAUG,MACC,MAAXA,EACAP,EAAQ,YAERR,QAAQC,MAAM,kBAAkBW,KAChCH,EAAO,wBAAwBM,KACnC,IACDjB,OAAOC,IACNC,QAAQC,MAAM,kBAAkBF,KAChCU,EAAO,kBAAkB,GAC3B,IACPX,OAAOC,IACNC,QAAQC,MAAM,kBAAkBF,KAChCU,EAAO,mBAAkB,GAC3B,GAGV,CAOAH,uBAAuBa,GACnB,OAAO,IAAIZ,SAAQ,CAACC,EAASC,KACzBC,MAAM,GAAG1B,KAAKqB,sBAAsBc,IAAM,CACtCM,OAAQ,MACRd,YAAa,YACdhB,MAAKiB,IAEJL,QAAQM,IAAI,CAACD,EAASE,OAAQF,EAASG,SAClCpB,MAAK,EAAEqC,EAAGjB,MACQ,MAAXA,EACAP,EAAQ,WAERC,EAAO,wBAAwBM,IACnC,IACDjB,OAAOC,IACNU,EAAO,kBAAkB,GAC3B,IACPX,OAAOkC,IACNvB,EAAO,SAAS,GAClB,GAGV,CAOAH,iBAAiBa,GACb,OAAO,IAAIZ,SAAQ,CAACC,EAASC,KACzBC,MAAM,GAAG1B,KAAKqB,WAAWc,IAAM,CAC3BM,OAAQ,SACRd,YAAa,YACdhB,MAAKiB,IAEJL,QAAQM,IAAI,CAACD,EAASmB,OAAQnB,EAASG,SAClCpB,MAAK,EAAEqB,EAAMD,MACK,MAAXA,EACAP,EAAQ,WAERC,EAAO,wBAAwBM,IACnC,IACDjB,OAAOC,IACNU,EAAO,kBAAkB,GAC3B,IACPX,OAAOkC,IACNvB,EAAO,wBAAuB,GAChC,GAGV,uIC9SG,MAAM6B,EAQTzD,cACIG,KAAKuD,UAAY,IAAI,EAAAnC,UAAU,wCACnC,CAGAE,cAAckC,GACV,OAAOxD,KAAKuD,UAAUE,WAAWD,EACrC,CAGAlC,eAAeoC,GACX,OAAO1D,KAAKuD,UAAUI,WAAWD,EACrC,CAEApC,iBACI,OAAOtB,KAAKuD,UAAUK,SAC1B,CAGAtC,cAAcuC,EAAQzB,GAAsB,GACxC,OAAOpC,KAAKuD,UAAUO,gBAAgBD,EAAQzB,EAClD,CAEAd,qBAAqBuC,GACjB,OAAO7D,KAAKuD,UAAUQ,WAAWF,EACrC,CAGAvC,qBAAqBlB,GACjB,OAAOJ,KAAKuD,UAAUS,aAAa5D,EACvC,oICtCG,MAAM6D,UAAsB,EAAAX,UAE/BzD,cACIqE,QACAlE,KAAKmE,SAAW,GAChBnE,KAAKoE,eAAiB,EAC1B,CAGA9C,oBAEI,aADqBtB,KAAKqE,UAE9B,CAEA/C,uBAAuBlB,GAEnB,aAD2BJ,KAAKsE,eAAelE,EAEnD,qFCnBG,MAAMmE,EACT1E,cAEIG,KAAKwE,cAAgBC,SAASC,cAAc,iBAChD,CAEAvD,aAAawD,GACJA,GAMDA,EAAMC,SAAQC,IAEV,IAAIC,EAAYL,SAASM,cAAc,OACvCD,EAAUE,UAAY,0BAEtB,IAAIC,EAAYR,SAASM,cAAc,QACvCE,EAAUD,UAAY,YACtB,IAAIE,EAAOT,SAASU,eAAeN,EAAmB,aAAIA,EAAmB,aAAIA,EAAkB,aACnGI,EAAUG,YAAYF,GAEtB,IAAIG,EAAaZ,SAASM,cAAc,KACxCM,EAAWL,UAAY,aACvB,IAAIM,EAAQb,SAASU,eAAeN,EAAY,OAChDQ,EAAWD,YAAYE,GAEvB,IAAIC,EAAYd,SAASM,cAAc,KACvCQ,EAAUP,UAAY,kBACtB,IAAIQ,EAAcf,SAASU,eAAeN,EAAe,UACzDU,EAAUH,YAAYI,GAEtBH,EAAWI,iBAAiB,SAAS,WACjCnF,SAASoF,KAAO,eAAeb,EAAS,IAC5C,IAEAU,EAAUI,QAAU,WAChBrF,SAASoF,KAAO,eAAeb,EAAS,IAC5C,EAEA,IAAIe,EAAOnB,SAASM,cAAc,OAClCa,EAAKZ,UAAY,OACjB,IAAIa,EAAYhB,EAAW,KAC3B,IAAK,MAAMzE,KAAOyF,EAAW,CACzB,IAAIC,EAAUrB,SAASM,cAAc,KACrCe,EAAQd,UAAY,MACpBc,EAAQL,iBAAiB,SAAS,WAC9B,IAAIM,EAAa7D,mBAAmB9B,GACpCY,QAAQiB,IAAI8D,GACZzF,SAASoF,KAAO,eAAeK,GACnC,IACA,IAAIC,EAAWvB,SAASU,eAAe/E,GACvC0F,EAAQV,YAAYY,GACpBJ,EAAKR,YAAYU,EACrB,CAGAhB,EAAUM,YAAYH,GACtBH,EAAUM,YAAYC,GACtBP,EAAUM,YAAYG,GACtBT,EAAUM,YAAYQ,GAGtB5F,KAAKwE,cAAcY,YAAYN,EAAU,GAIrD,KCnEAmB,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,CAAC,GAOX,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,OACf,CCrBAJ,EAAoBO,EAAI,CAACH,EAASI,KACjC,IAAI,IAAIC,KAAOD,EACXR,EAAoBU,EAAEF,EAAYC,KAAST,EAAoBU,EAAEN,EAASK,IAC5EE,OAAOC,eAAeR,EAASK,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDT,EAAoBU,EAAI,CAACK,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFhB,EAAoBoB,EAAKhB,IACH,oBAAXiB,QAA0BA,OAAOC,aAC1CX,OAAOC,eAAeR,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DZ,OAAOC,eAAeR,EAAS,aAAc,CAAEmB,OAAO,GAAO,2GCDlD,kDAAI7H,oBAAmB,IAAI,EAAAqE,cAAiB,IAAI,EAAAM","sources":["webpack://ngacho-new/./app/controller/blog-list-controller.js","webpack://ngacho-new/./app/model/base-models/base-model.js","webpack://ngacho-new/./app/model/base-models/blog-model.js","webpack://ngacho-new/./app/model/blog-list-model.js","webpack://ngacho-new/./app/view/blog/blog-list-view.js","webpack://ngacho-new/webpack/bootstrap","webpack://ngacho-new/webpack/runtime/define property getters","webpack://ngacho-new/webpack/runtime/hasOwnProperty shorthand","webpack://ngacho-new/webpack/runtime/make namespace object","webpack://ngacho-new/./app/blog-list-app.js"],"sourcesContent":["export class BlogListController {\n\n    constructor(blogListModel, blogListView) {\n        this.model = blogListModel;\n        this.view = blogListView;\n\n        this.init();\n    }\n\n    init() {\n        let tag = decodeURI(location.search).slice(1);\n        let blogListRef = tag ? this.model.getBlogListByTag(tag) : this.model.getBlogList();\n        \n        // Display initial todos\n        blogListRef.then((blogData) => {\n            this.onBlogListChanged(blogData);\n        }).catch((err) => {\n            console.error(err);\n        })\n    }\n\n    onBlogListChanged = (blogs) => {\n        this.view.displayBlogs(blogs)\n    }\n\n}","export class BaseModel{\n    constructor(baseUrl){\n        this.baseUrl = baseUrl;\n\n    }\n\n\n    /**\n     * \n     * @returns {Promise with array of objects}\n     */\n    async getList(){\n        return new Promise((resolve, reject) => {\n            fetch(this.baseUrl, {credentials: 'include'})\n                .then(response => {\n                    // Process the response body and status code simultaneously\n                    Promise.all([response.json(), response.status])\n                        .then(([data, status]) => {\n                            if (status === 200) {\n                                resolve(data);\n                            } else {\n                                console.log(err);\n                                reject(`Failed with response ${status}`)\n                            }\n                        }).catch((err) => {\n                            console.log(err);\n                            reject(`Failed response: ${err}`);\n                        });\n                }).catch((err) => {\n                    console.log(err);\n                    reject(\"Failed to fetch\")\n            });\n        });\n    }\n\n    /**\n     * \n     * @param {a tag in series} tag \n     * @returns promise of array of objects\n     */\n    async getListByTag(tag){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/tags/${encodeURIComponent(tag)}`)\n                .then(response => {\n                    // Process the response body and status code simultaneously\n                    Promise.all([response.json(), response.status])\n                        .then(([data, status]) => {\n                            if (status === 200) {\n                                resolve(data);\n                            } else {\n                                reject(`Failed with response ${status}`)\n                            }\n                        }).catch((err) => {\n                            reject(`Failed response: ${err}`);\n                        });\n                }).catch((err) => reject(\"Failed to fetch\"));\n        });\n    }\n\n\n    /**\n     * \n     * @param {object id} id \n     * @returns promise of single object\n     */\n    async getListItemById(id, serverSideRendering){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${id}/${serverSideRendering}`, {credentials: 'include'}).then((response) => {\n                Promise.all([response.json(), response.status])\n                    .then(([data, status]) => {\n                        if (status === 200) {\n                            resolve(data);\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        reject(\"Failed response\")\n                    });\n\n            }).catch(() => reject(\"Failed to fetch id\"))\n        });\n    }\n\n    /**\n     * \n     * @param {item we want to create} contents \n     * @returns status of item creation\n     */\n    async createItem(contents){\n        const payload = {\n            doc: contents\n        }\n\n        const requestOptions = {\n            method: 'POST',\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n            credentials: 'include',\n            body: JSON.stringify(payload)\n        };\n\n        return new Promise((resolve, reject) => {\n            fetch(this.baseUrl, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`);\n                reject(\"Failed response.\")\n            });\n        });\n    }\n\n    /**\n     * \n     * @param {file we want to upload} file \n     * @param {any data associated with the file} itemObject \n     * @returns \n     */\n    async createFileItem(file, itemObject){\n        \n        const formData = new FormData();\n        formData.append('file', file);\n        formData.append('doc', JSON.stringify(itemObject));\n\n\n        const requestOptions = {\n            method: 'POST',\n            credentials: 'include',\n            body: formData\n        }\n\n\n        return new Promise((resolve, reject) => {\n            fetch(this.baseUrl, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`);\n                reject(\"Failed response.\")\n            });\n        });\n\n        \n\n\n    }\n\n    /**\n     * \n     * @param {file object we want to update} file \n     * @param {data object for metadata of the file} contents \n     * @returns the status of the update\n     */\n    async updateFileItemObject(file, contents){\n        const formData = new FormData();\n        formData.append('file', file);\n        formData.append('doc', JSON.stringify(contents));\n\n\n        const requestOptions = {\n            method: 'PUT',\n            body: formData,\n            credentials: 'include'\n        }\n\n\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${contents['id']}`, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`);\n                reject(\"Failed response.\")\n            });\n        });\n\n    }\n\n    /**\n     * \n     * @param {data object of item to be update} contents \n     * @returns status of updated item\n     */\n    async updateItem(contents){\n        const payload = {\n            doc: contents\n        }\n\n        const requestOptions = {\n            method: 'PUT',\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n            credentials: 'include',\n            body: JSON.stringify(payload)\n        }\n\n\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${contents['id']}`, requestOptions).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([response, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            console.error(`ERROR LEVEL 2: ${response}`);\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        console.error(`ERROR LEVEL 2: ${err}`);\n                        reject(\"Failed response\");\n                    });\n            }).catch((err) => {\n                console.error(`ERROR LEVEL 1: ${err}`)\n                reject(\"Failed response.\")\n            });\n        });\n\n    }\n\n    /**\n     * used for activating and deactivating items\n     * @param {id of item we want to update} id \n     * @returns status of update\n     */\n    async updateItemStatus(id){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/set-active/${id}`, {\n                method: 'PUT',\n                credentials: 'include'\n            }).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.json(), response.status])\n                    .then(([_, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        reject(\"Failed response\");\n                    });\n            }).catch((_) => {\n                reject(\"Failed\");\n            });\n        });\n\n    }\n\n    /**\n     * \n     * @param {id of item to be deleted} id \n     * @returns \n     */\n    async deleteItem(id){\n        return new Promise((resolve, reject) => {\n            fetch(`${this.baseUrl}/${id}`, {\n                method: 'DELETE',\n                credentials: 'include'\n            }).then(response => {\n                // Process the response body and status code simultaneously\n                Promise.all([response.text(), response.status])\n                    .then(([data, status]) => {\n                        if (status === 200) {\n                            resolve(\"Success\");\n                        } else {\n                            reject(`Failed with response ${status}`)\n                        }\n                    }).catch((err) => {\n                        reject(\"Failed response\");\n                    });\n            }).catch((_) => {\n                reject(\"Failed to delete text\")\n            });\n        });\n\n    }\n\n    \n\n    \n}","import { BaseModel } from \"./base-model.js\";\n\nexport class BlogModel {\n\n    /**\n     * getBlogs\n     * deleteBlogById\n     * editBlog\n     * addBlog\n     */\n    constructor() {\n        this.baseModel = new BaseModel(\"https://api.ngacho.com/database/blogs\");\n    }\n\n    // pass me a new blog. I'll modify the id\n    async addBlog(blog) {\n        return this.baseModel.createItem(blog);\n    }\n\n    // pass me an edited blog, it should have a blog id.\n    async editBlog(editedBlog) {\n        return this.baseModel.updateItem(editedBlog);\n    }\n\n    async getBlogs() {\n        return this.baseModel.getList();\n    }\n\n    // singular blog raw vs ssr\n    async getBlog(blogId, serverSideRendering = false) {\n        return this.baseModel.getListItemById(blogId, serverSideRendering);\n    }\n\n    async deleteBlogById(blogId) {\n        return this.baseModel.deleteItem(blogId);\n    }\n\n    // filter blog by tags.\n    async getBlogsByTags(tag) {\n        return this.baseModel.getListByTag(tag);\n    }\n\n}\n","import { BlogModel } from \"./base-models/blog-model.js\";\n\nexport class BlogListModel extends BlogModel {\n\n    constructor() {\n        super();\n        this.blogList = [];\n        this.taggedBlogList = [];\n    }\n\n\n    async getBlogList(){\n        var blogList = await this.getBlogs();\n        return blogList;\n    }\n\n    async getBlogListByTag(tag) {\n        var taggedBlogList = await this.getBlogsByTags(tag);\n        return taggedBlogList;\n    }\n}","export class BlogListView {\n    constructor() {\n        // The root element\n        this.blogs_wrapper = document.querySelector(\".blogs-wrapper\");\n    }\n\n    displayBlogs(posts) {\n        if (!posts) {\n            // add error of no blogs yet.\n            // const no_blog_warning = document.createElement('h1')\n            // no_blog_warning.textContent = 'No blog yet. Please come back later.'\n            // this.blogs_wrapper.append(no_blog_warning);\n        } else {\n            posts.forEach(post => {\n                // Your existing code unmodified...\n                var blog_item = document.createElement('div');\n                blog_item.className = 'blog-item animate-entry';\n\n                var time_item = document.createElement('time');\n                time_item.className = 'post-date';\n                var time = document.createTextNode(post[\"lastModified\"] ? post[\"lastModified\"] : post[\"publishedAt\"]);\n                time_item.appendChild(time);\n\n                var post_title = document.createElement('p');\n                post_title.className = 'post-title';\n                var title = document.createTextNode(post[\"title\"]);\n                post_title.appendChild(title);\n\n                var post_desc = document.createElement('p');\n                post_desc.className = 'post-short-desc';\n                var description = document.createTextNode(post[\"descript\"]);\n                post_desc.appendChild(description);\n\n                post_title.addEventListener('click', function () {\n                    location.href = `/blog-post/?${post[\"id\"]}`;\n                });\n\n                post_desc.onclick = function () {\n                    location.href = `/blog-post/?${post[\"id\"]}`;\n                }\n\n                var tags = document.createElement('div');\n                tags.className = 'tags';\n                var post_tags = post[\"tags\"];\n                for (const tag of post_tags) {\n                    var tag_ref = document.createElement('a');\n                    tag_ref.className = 'tag';\n                    tag_ref.addEventListener('click', function () {\n                        let encodedTag = encodeURIComponent(tag);\n                        console.log(encodedTag)\n                        location.href = `/blog/tags/?${encodedTag}`;\n                    });\n                    var tag_item = document.createTextNode(tag);\n                    tag_ref.appendChild(tag_item);\n                    tags.appendChild(tag_ref);\n                }\n\n                // append all elements to the div\n                blog_item.appendChild(time_item);\n                blog_item.appendChild(post_title);\n                blog_item.appendChild(post_desc);\n                blog_item.appendChild(tags);\n\n                // append the blog item to the blog wrappers.\n                this.blogs_wrapper.appendChild(blog_item);\n\n            });\n        }\n    }\n\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { BlogListModel } from \"./model/blog-list-model.js\";\nimport { BlogListView } from \"./view/blog/blog-list-view.js\";\nimport { BlogListController } from \"./controller/blog-list-controller.js\";\n\nconst app = new BlogListController(new BlogListModel(), new BlogListView());"],"names":["BlogListController","constructor","blogListModel","blogListView","this","model","view","init","tag","decodeURI","location","search","slice","getBlogListByTag","getBlogList","then","blogData","onBlogListChanged","catch","err","console","error","blogs","displayBlogs","BaseModel","baseUrl","async","Promise","resolve","reject","fetch","credentials","response","all","json","status","data","log","encodeURIComponent","id","serverSideRendering","contents","payload","doc","requestOptions","method","headers","Headers","body","JSON","stringify","text","_","file","itemObject","formData","FormData","append","BlogModel","baseModel","blog","createItem","editedBlog","updateItem","getList","blogId","getListItemById","deleteItem","getListByTag","BlogListModel","super","blogList","taggedBlogList","getBlogs","getBlogsByTags","BlogListView","blogs_wrapper","document","querySelector","posts","forEach","post","blog_item","createElement","className","time_item","time","createTextNode","appendChild","post_title","title","post_desc","description","addEventListener","href","onclick","tags","post_tags","tag_ref","encodedTag","tag_item","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value"],"sourceRoot":""}